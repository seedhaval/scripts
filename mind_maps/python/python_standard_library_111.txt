python standard library
    json
        json.dumps
            (obj, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)
            Serialize ``obj`` to a JSON formatted ``str``.
        json.encoder
            Implementation of JSONEncoder
        json.load
            (fp, *, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)
            Deserialize ``fp`` (a ``.read()``-supporting file-like object containing a JSON document) to a Python object.
            ``object_hook`` is an optional function that will be called with the result of any object literal decode (a ``dict``)
            The return value of ``object_hook`` will be used instead of the ``dict``
            This feature can be used to implement custom decoders (e.g JSON-RPC class hinting).
            ``object_pairs_hook`` is an optional function that will be called with the result of any object literal decoded with an ordered list of pairs
            The return value of ``object_pairs_hook`` will be used instead of the ``dict``.
            This feature can be used to implement custom decoders
            If ``object_hook`` is also defined, the ``object_pairs_hook`` takes priority.
            To use a custom ``JSONDecoder`` subclass, specify it with the ``cls`` kwarg; otherwise ``JSONDecoder`` is used.
        json.loads
            (s, *, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)
            Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance containing a JSON document) to a Python object.
            ``object_hook`` is an optional function that will be called with the