python standard library
    subprocess
        subprocess.getstatusoutput
            (cmd)
            Return (exitcode, output) of executing cmd in a shell.
            Execute the string 'cmd' in a shell with 'check_output' and return a 2-tuple (status, output)
            The locale encoding is used to decode the output and process newlines.
            A trailing newline is stripped from the output.
            The exit status for the command can be interpreted according to the rules for the function 'wait'
        subprocess.list2cmdline
            (seq)
            Translate a sequence of arguments into a command line string, using the same rules as the MS C runtime:
            1) Arguments are delimited by white space, which is either a space or a tab.
            2) A string surrounded by double quotation marks is interpreted as a single argument, regardless of white space contained within A quoted string can be embedded in an argument.
            3) A double quotation mark preceded by a backslash is interpreted as a literal double quotation mark.
            4) Backslashes are interpreted literally, unless they immediately precede a double quotation mark.
            5) If backslashes immediately precede a double quotation mark, every pair of backslashes is interpreted as a literal backslash
            If the number of backslashes is odd, the last backslash escapes the next double quotation mark as described in rule 3.
        subprocess.run
            (*popenargs, input=None, capture_output=False, timeout=None, check=False, **kwargs)
            Run command with arguments and return a CompletedProcess instance.
            The returned instance will have attributes args, returncode, stdout and stderr
            By default, stdout and stderr are not captured, and those attributes will be None
            Pass stdout=PIPE and/or stderr=PIPE in order to capture them.
            If check is True and the exit code was non-zero, it raises a CalledProcessError
            The CalledProcessError object will have the return code in the returncode attribute, and output & stderr attributes if those streams were captured.
            If timeout is given, and the process takes too long, a TimeoutExpired exception will be raised.
            There is an optional argument "input", allowing you to pass bytes or a string to the subprocess's stdin
            If you use this argument you may not also use the Popen constructor's "stdin" argument, as it will be used internally.
            By default, all communication is in bytes, and therefore any "input" should be bytes, and the stdout and stderr will be bytes
            If in text mode, any "input" should be a string, and stdout and stderr will be strings decoded according to locale encoding, or by "encoding" if set
            Text mode is triggered by setting any of text, encoding, errors or universal_newlines.
            The other arguments are the same as for the Popen constructor.