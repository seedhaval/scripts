python standard library
    collections
        collections.ChainMap.get
            (self, key, default=None)
            D.get(k[,d]) -> D[k] if k in D, else d
            d defaults to None.
        collections.ChainMap.items
            (self)
            D.items() -> a set-like object providing a view on D's items
        collections.ChainMap.keys
            (self)
            D.keys() -> a set-like object providing a view on D's keys
        collections.ChainMap.new_child
            (self, m=None)
            New ChainMap with a new map followed by all previous maps.
            If no map is provided, an empty dict is used.
        collections.ChainMap.parents
            New ChainMap from maps[1:].
        collections.ChainMap.pop
            (self, key, *args)
            Remove *key* from maps[0] and return its value
            Raise KeyError if *key* not in maps[0].