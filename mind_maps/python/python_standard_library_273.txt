python standard library
    logging
        logging.Filterer.addFilter
            (self, filter)
            Add the specified filter to this handler.
        logging.Filterer.filter
            (self, record)
            Determine if a record is loggable by consulting all the filters.
            The default is to allow the record to be logged; any filter can veto this and the record is then dropped
            Returns a zero value if a record is to be dropped, else non-zero.
        logging.Filterer.removeFilter
            (self, filter)
            Remove the specified filter from this handler.
        logging.Formatter
            (fmt=None, datefmt=None, style='%', validate=True)
            Formatter instances are used to convert a LogRecord to text.
            Formatters need to know how a LogRecord is constructed
            They are responsible for converting a LogRecord to (usually) a string which can be interpreted by either a human or an external system
            The base Formatter allows a formatting string to be specified
            If none is supplied, the style-dependent default value, "%(message)s", "{message}", or "${message}", is used.
            %(name)s            Name of the logger (logging channel)
            %(levelno)s         Numeric logging level for the message (DEBUG, INFO, WARNING, ERROR, CRITICAL)
            %(levelname)s       Text logging level for the message ("DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL")
            %(pathname)s        Full pathname of the source file where the logging call was issued (if available)
            %(filename)s        Filename portion of pathname
            %(module)s          Module (name portion of filename)
            %(lineno)d          Source line number where the logging call was issued
            %(funcName)s        Function name
            %(created)f         Time when the LogRecord was created (time.time()
            return value)
            %(asctime)s         Textual time when the LogRecord was created
            %(msecs)d           Millisecond portion of the creation time
            %(relativeCreated)d Time in milliseconds when the LogRecord was created, relative to the time the logging module was loaded (typically at application startup time)
            %(thread)d          Thread ID (if available)
            %(threadName)s      Thread name (if available)
            %(process)d         Process ID (if available)
            %(message)s         The result of record.getMessage(), computed just as the record is emitted