python standard library
    configparser
        configparser.SectionProxy.name
        configparser.SectionProxy.parser
        configparser.SectionProxy.pop
            (self, key, default=<object object at 0x7f5f0e4f1160>)
            D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
            If key is not found, d is returned if given, otherwise KeyError is raised.
        configparser.SectionProxy.popitem
            (self)
            D.popitem() -> (k, v), remove and return some (key, value) pair as a 2-tuple; but raise KeyError if D is empty.
        configparser.SectionProxy.setdefault
            (self, key, default=None)
            D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D
        configparser.SectionProxy.update
            (self, other=(), /, **kwds)
            D.update([E, ]**F) -> None
            Update D from mapping/iterable E and F.
            If E present and has a .keys() method, does:     for k in E: D[k] = E[k]
            If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v
            In either case, this is followed by: for k, v in F.items(): D[k] = v