python standard library
    configparser
        configparser.RawConfigParser.getboolean
            (self, section, option, *, raw=False, vars=None, fallback=<object object at 0x7f5f0e4f1f40>, **kwargs)
        configparser.RawConfigParser.getfloat
            (self, section, option, *, raw=False, vars=None, fallback=<object object at 0x7f5f0e4f1f40>, **kwargs)
        configparser.RawConfigParser.getint
            (self, section, option, *, raw=False, vars=None, fallback=<object object at 0x7f5f0e4f1f40>, **kwargs)
        configparser.RawConfigParser.has_option
            (self, section, option)
            Check for the existence of a given option in a given section.
            If the specified `section' is None or an empty string, DEFAULT is assumed
            If the specified `section' does not exist, returns False.
        configparser.RawConfigParser.has_section
            (self, section)
            Indicate whether the named section is present in the configuration.
            The DEFAULT section is not acknowledged.
        configparser.RawConfigParser.items
            (self, section=<object object at 0x7f5f0e4f1f40>, raw=False, vars=None)
            Return a list of (name, value) tuples for each option in a section.
            All % interpolations are expanded in the return values, based on the defaults passed into the constructor, unless the optional argument `raw' is true
            Additional substitutions may be provided using the `vars' argument, which must be a dictionary whose contents overrides any pre-existing defaults.
            The section DEFAULT is special.