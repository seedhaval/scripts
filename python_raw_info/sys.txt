==============================
sys.abiflags
str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object
If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.

==============================
sys.addaudithook
(hook)
Adds a new audit hook callback.

==============================
sys.api_version
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sys.argv
Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

==============================
sys.audit
audit(event, *args)

Passes the event to any audit hooks that are attached.

==============================
sys.base_exec_prefix
str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object
If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.

==============================
sys.base_prefix
str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object
If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.

==============================
sys.breakpointhook
breakpointhook(*args, **kws)

This hook function is called by built-in breakpoint().

==============================
sys.builtin_module_names
Built-in immutable sequence.

If no argument is given, the constructor returns an empty tuple.
If iterable is specified the tuple is initialized from iterable's items.

If the argument is a tuple, the return value is the same object.

==============================
sys.byteorder
str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object
If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.

==============================
sys.call_tracing
(func, args, /)
Call func(*args), while tracing is enabled.

The tracing state is saved, and restored afterwards
 This is intended
to be called from a debugger from a checkpoint, to recursively debug
some other code.

==============================
sys.callstats
()
Return a tuple of function call statistics.

A tuple is returned only if CALL_PROFILE was defined when Python was
built
 Otherwise, this returns None.

When enabled, this function returns detailed, implementation-specific
details about the number of function calls executed
The return value
is a 11-tuple where the entries in the tuple are counts of:
0
all function calls
1
calls to PyFunction_Type objects
2
PyFunction calls that do not create an argument tuple
3
PyFunction calls that do not create an argument tuple
   and bypass PyEval_EvalCodeEx()
4
PyMethod calls
5
PyMethod calls on bound methods
6
PyType calls
7
PyCFunction calls
8
generator calls
9
All other calls
10
Number of stack pops performed by call_function()

==============================
sys.copyright
str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object
If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.

==============================
sys.displayhook
(object, /)
Print an object to sys.stdout and also save it in builtins._

==============================
sys.dont_write_bytecode
bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.

==============================
sys.exc_info
()
Return current exception information: (type, value, traceback).

Return information about the most recent exception caught by an except
clause in the current stack frame or in an older stack frame.

==============================
sys.excepthook
(exc_type, exc_obj, exc_tb)
Catch an uncaught exception and make a traceback.

==============================
sys.exec_prefix
str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object
If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.

==============================
sys.executable
str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object
If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.

==============================
sys.exit
(status=None, /)
Exit the interpreter by raising SystemExit(status).

If the status is omitted or None, it defaults to zero (i.e., success).
If the status is an integer, it will be used as the system exit status.
If it is another kind of object, it will be printed and the system
exit status will be one (i.e., failure).

==============================
sys.flags
sys.flags

Flags provided through command line arguments or environment vars.

==============================
sys.float_info
sys.float_info

A named tuple holding information about the float type
It contains low level
information about the precision and internal representation
Please study
your system's :file:`float.h` for more information.

==============================
sys.float_repr_style
str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object
If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.

==============================
sys.get_asyncgen_hooks
()
Return the installed asynchronous generators hooks.

This returns a namedtuple of the form (firstiter, finalizer).

==============================
sys.get_coroutine_origin_tracking_depth
()
Check status of origin tracking for coroutine objects in this thread.

==============================
sys.getallocatedblocks
()
Return the number of memory blocks currently allocated.

==============================
sys.getcheckinterval
()
Return the current check interval; see sys.setcheckinterval().

==============================
sys.getdefaultencoding
()
Return the current default encoding used by the Unicode implementation.

==============================
sys.getdlopenflags
()
Return the current value of the flags that are used for dlopen calls.

The flag constants are defined in the os module.

==============================
sys.getfilesystemencodeerrors
()
Return the error mode used Unicode to OS filename conversion.

==============================
sys.getfilesystemencoding
()
Return the encoding used to convert Unicode filenames to OS filenames.

==============================
sys.getprofile
()
Return the profiling function set with sys.setprofile.

See the profiler chapter in the library manual.

==============================
sys.getrecursionlimit
()
Return the current value of the recursion limit.

The recursion limit is the maximum depth of the Python interpreter
stack
 This limit prevents infinite recursion from causing an overflow
of the C stack and crashing Python.

==============================
sys.getrefcount
(object, /)
Return the reference count of object.

The count returned is generally one higher than you might expect,
because it includes the (temporary) reference as an argument to
getrefcount().

==============================
sys.getsizeof
getsizeof(object [, default]) -> int

Return the size of object in bytes.

==============================
sys.getswitchinterval
()
Return the current thread switch interval; see sys.setswitchinterval().

==============================
sys.gettrace
()
Return the global debug tracing function set with sys.settrace.

See the debugger chapter in the library manual.

==============================
sys.hash_info
hash_info

A named tuple providing parameters used for computing
hashes
The attributes are read only.

==============================
sys.hexversion
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sys.implementation
A simple attribute-based namespace.

SimpleNamespace(**kwargs)

==============================
sys.int_info
sys.int_info

A named tuple that holds information about Python's
internal representation of integers
 The attributes are read only.

==============================
sys.intern
(string, /)
``Intern'' the given string.

This enters the string in the (global) table of interned strings whose
purpose is to speed up dictionary lookups
Return the string itself or
the previously interned string object with the same value.

==============================
sys.is_finalizing
()
Return True if Python is exiting.

==============================
sys.maxsize
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sys.maxunicode
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sys.meta_path
Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

==============================
sys.modules
dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list
 For example:  dict(one=1, two=2)

==============================
sys.path
Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

==============================
sys.path_hooks
Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

==============================
sys.path_importer_cache
dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list
 For example:  dict(one=1, two=2)

==============================
sys.platform
str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object
If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.

==============================
sys.prefix
str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object
If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.

==============================
sys.pycache_prefix
None

==============================
sys.set_asyncgen_hooks
set_asyncgen_hooks(* [, firstiter] [, finalizer])

Set a finalizer for async generators objects.

==============================
sys.set_coroutine_origin_tracking_depth
(depth)
Enable or disable origin tracking for coroutine objects in this thread.

Coroutine objects will track 'depth' frames of traceback information
about where they came from, available in their cr_origin attribute.

Set a depth of 0 to disable.

==============================
sys.setcheckinterval
(n, /)
Set the async event check interval to n instructions.

This tells the Python interpreter to check for asynchronous events
every n instructions.

This also affects how often thread switches occur.

==============================
sys.setdlopenflags
(flags, /)
Set the flags used by the interpreter for dlopen calls.

This is used, for example, when the interpreter loads extension
modules
Among other things, this will enable a lazy resolving of
symbols when importing a module, if called as sys.setdlopenflags(0).
To share symbols across extension modules, call as
sys.setdlopenflags(os.RTLD_GLOBAL)
 Symbolic names for the flag
modules can be found in the os module (RTLD_xxx constants, e.g.
os.RTLD_LAZY).

==============================
sys.setprofile
setprofile(function)

Set the profiling function
 It will be called on each function call
and return
 See the profiler chapter in the library manual.

==============================
sys.setrecursionlimit
(limit, /)
Set the maximum depth of the Python interpreter stack to n.

This limit prevents infinite recursion from causing an overflow of the C
stack and crashing Python
 The highest possible limit is platform-
dependent.

==============================
sys.setswitchinterval
(interval, /)
Set the ideal thread switching delay inside the Python interpreter.

The actual frequency of switching threads can be lower if the
interpreter executes long sequences of uninterruptible code
(this is implementation-specific and workload-dependent).

The parameter must represent the desired switching delay in seconds
A typical value is 0.005 (5 milliseconds).

==============================
sys.settrace
settrace(function)

Set the global debug tracing function
 It will be called on each
function call
 See the debugger chapter in the library manual.

==============================
sys.stderr
Character and line based layer over a BufferedIOBase object, buffer.

encoding gives the name of the encoding that the stream will be
decoded or encoded with
It defaults to locale.getpreferredencoding(False).

errors determines the strictness of encoding and decoding (see
help(codecs.Codec) or the documentation for codecs.register) and
defaults to "strict".

newline controls how line endings are handled
It can be None, '',
'\n', '\r', and '\r\n'
 It works as follows:

* On input, if newline is None, universal newlines mode is
  enabled
Lines in the input can end in '\n', '\r', or '\r\n', and
  these are translated into '\n' before being returned to the
  caller
If it is '', universal newline mode is enabled, but line
  endings are returned to the caller untranslated
If it has any of
  the other legal values, input lines are only terminated by the given
  string, and the line ending is returned to the caller untranslated.

* On output, if newline is None, any '\n' characters written are
  translated to the system default line separator, os.linesep
If
  newline is '' or '\n', no translation takes place
If newline is any
  of the other legal values, any '\n' characters written are translated
  to the given string.

If line_buffering is True, a call to flush is implied when a call to
write contains a newline character.

==============================
sys.stdin
Character and line based layer over a BufferedIOBase object, buffer.

encoding gives the name of the encoding that the stream will be
decoded or encoded with
It defaults to locale.getpreferredencoding(False).

errors determines the strictness of encoding and decoding (see
help(codecs.Codec) or the documentation for codecs.register) and
defaults to "strict".

newline controls how line endings are handled
It can be None, '',
'\n', '\r', and '\r\n'
 It works as follows:

* On input, if newline is None, universal newlines mode is
  enabled
Lines in the input can end in '\n', '\r', or '\r\n', and
  these are translated into '\n' before being returned to the
  caller
If it is '', universal newline mode is enabled, but line
  endings are returned to the caller untranslated
If it has any of
  the other legal values, input lines are only terminated by the given
  string, and the line ending is returned to the caller untranslated.

* On output, if newline is None, any '\n' characters written are
  translated to the system default line separator, os.linesep
If
  newline is '' or '\n', no translation takes place
If newline is any
  of the other legal values, any '\n' characters written are translated
  to the given string.

If line_buffering is True, a call to flush is implied when a call to
write contains a newline character.

==============================
sys.stdout
Character and line based layer over a BufferedIOBase object, buffer.

encoding gives the name of the encoding that the stream will be
decoded or encoded with
It defaults to locale.getpreferredencoding(False).

errors determines the strictness of encoding and decoding (see
help(codecs.Codec) or the documentation for codecs.register) and
defaults to "strict".

newline controls how line endings are handled
It can be None, '',
'\n', '\r', and '\r\n'
 It works as follows:

* On input, if newline is None, universal newlines mode is
  enabled
Lines in the input can end in '\n', '\r', or '\r\n', and
  these are translated into '\n' before being returned to the
  caller
If it is '', universal newline mode is enabled, but line
  endings are returned to the caller untranslated
If it has any of
  the other legal values, input lines are only terminated by the given
  string, and the line ending is returned to the caller untranslated.

* On output, if newline is None, any '\n' characters written are
  translated to the system default line separator, os.linesep
If
  newline is '' or '\n', no translation takes place
If newline is any
  of the other legal values, any '\n' characters written are translated
  to the given string.

If line_buffering is True, a call to flush is implied when a call to
write contains a newline character.

==============================
sys.thread_info
sys.thread_info

A named tuple holding information about the thread implementation.

==============================
sys.unraisablehook
(unraisable, /)
Handle an unraisable exception.

The unraisable argument has the following attributes:

* exc_type: Exception type.
* exc_value: Exception value, can be None.
* exc_traceback: Exception traceback, can be None.
* err_msg: Error message, can be None.
* object: Object causing the exception, can be None.

==============================
sys.version
str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object
If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.

==============================
sys.version_info
sys.version_info

Version information as a named tuple.

==============================
sys.warnoptions
Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

