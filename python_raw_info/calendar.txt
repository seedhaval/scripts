==============================
calendar.Calendar
(firstweekday=0)
Base calendar class
This class doesn't do any formatting
It simply
provides data to subclasses.

==============================
calendar.Calendar.firstweekday
None

==============================
calendar.Calendar.getfirstweekday
(self)
None

==============================
calendar.Calendar.itermonthdates
(self, year, month)
Return an iterator for one month
The iterator will yield datetime.date
values and will always iterate through complete weeks, so it will yield
dates outside the specified month.

==============================
calendar.Calendar.itermonthdays
(self, year, month)
Like itermonthdates(), but will yield day numbers
For days outside
the specified month the day number is 0.

==============================
calendar.Calendar.itermonthdays2
(self, year, month)
Like itermonthdates(), but will yield (day number, weekday number)
tuples
For days outside the specified month the day number is 0.

==============================
calendar.Calendar.itermonthdays3
(self, year, month)
Like itermonthdates(), but will yield (year, month, day) tuples
 Can be
used for dates outside of datetime.date range.

==============================
calendar.Calendar.itermonthdays4
(self, year, month)
Like itermonthdates(), but will yield (year, month, day, day_of_week) tuples.
Can be used for dates outside of datetime.date range.

==============================
calendar.Calendar.iterweekdays
(self)
Return an iterator for one week of weekday numbers starting with the
configured first one.

==============================
calendar.Calendar.monthdatescalendar
(self, year, month)
Return a matrix (list of lists) representing a month's calendar.
Each row represents a week; week entries are datetime.date values.

==============================
calendar.Calendar.monthdays2calendar
(self, year, month)
Return a matrix representing a month's calendar.
Each row represents a week; week entries are
(day number, weekday number) tuples
Day numbers outside this month
are zero.

==============================
calendar.Calendar.monthdayscalendar
(self, year, month)
Return a matrix representing a month's calendar.
Each row represents a week; days outside this month are zero.

==============================
calendar.Calendar.setfirstweekday
(self, firstweekday)
None

==============================
calendar.Calendar.yeardatescalendar
(self, year, width=3)
Return the data for the specified year ready for formatting
The return
value is a list of month rows
Each month row contains up to width months.
Each month contains between 4 and 6 weeks and each week contains 1-7
days
Days are datetime.date objects.

==============================
calendar.Calendar.yeardays2calendar
(self, year, width=3)
Return the data for the specified year ready for formatting (similar to
yeardatescalendar())
Entries in the week lists are
(day number, weekday number) tuples
Day numbers outside this month are
zero.

==============================
calendar.Calendar.yeardayscalendar
(self, year, width=3)
Return the data for the specified year ready for formatting (similar to
yeardatescalendar())
Entries in the week lists are day numbers.
Day numbers outside this month are zero.

==============================
calendar.EPOCH
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
calendar.FRIDAY
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
calendar.February
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
calendar.HTMLCalendar
(firstweekday=0)
This calendar returns complete HTML pages.

==============================
calendar.HTMLCalendar.cssclass_month
str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object
If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.

==============================
calendar.HTMLCalendar.cssclass_month_head
str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object
If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.

==============================
calendar.HTMLCalendar.cssclass_noday
str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object
If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.

==============================
calendar.HTMLCalendar.cssclass_year
str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object
If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.

==============================
calendar.HTMLCalendar.cssclass_year_head
str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object
If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.

==============================
calendar.HTMLCalendar.cssclasses
Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

==============================
calendar.HTMLCalendar.cssclasses_weekday_head
Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

==============================
calendar.HTMLCalendar.firstweekday
None

==============================
calendar.HTMLCalendar.formatday
(self, day, weekday)
Return a day as a table cell.

==============================
calendar.HTMLCalendar.formatmonth
(self, theyear, themonth, withyear=True)
Return a formatted month as a table.

==============================
calendar.HTMLCalendar.formatmonthname
(self, theyear, themonth, withyear=True)
Return a month name as a table row.

==============================
calendar.HTMLCalendar.formatweek
(self, theweek)
Return a complete week as a table row.

==============================
calendar.HTMLCalendar.formatweekday
(self, day)
Return a weekday name as a table header.

==============================
calendar.HTMLCalendar.formatweekheader
(self)
Return a header for a week as a table row.

==============================
calendar.HTMLCalendar.formatyear
(self, theyear, width=3)
Return a formatted year as a table of tables.

==============================
calendar.HTMLCalendar.formatyearpage
(self, theyear, width=3, css='calendar.css', encoding=None)
Return a formatted year as a complete HTML page.

==============================
calendar.HTMLCalendar.getfirstweekday
(self)
None

==============================
calendar.HTMLCalendar.itermonthdates
(self, year, month)
Return an iterator for one month
The iterator will yield datetime.date
values and will always iterate through complete weeks, so it will yield
dates outside the specified month.

==============================
calendar.HTMLCalendar.itermonthdays
(self, year, month)
Like itermonthdates(), but will yield day numbers
For days outside
the specified month the day number is 0.

==============================
calendar.HTMLCalendar.itermonthdays2
(self, year, month)
Like itermonthdates(), but will yield (day number, weekday number)
tuples
For days outside the specified month the day number is 0.

==============================
calendar.HTMLCalendar.itermonthdays3
(self, year, month)
Like itermonthdates(), but will yield (year, month, day) tuples
 Can be
used for dates outside of datetime.date range.

==============================
calendar.HTMLCalendar.itermonthdays4
(self, year, month)
Like itermonthdates(), but will yield (year, month, day, day_of_week) tuples.
Can be used for dates outside of datetime.date range.

==============================
calendar.HTMLCalendar.iterweekdays
(self)
Return an iterator for one week of weekday numbers starting with the
configured first one.

==============================
calendar.HTMLCalendar.monthdatescalendar
(self, year, month)
Return a matrix (list of lists) representing a month's calendar.
Each row represents a week; week entries are datetime.date values.

==============================
calendar.HTMLCalendar.monthdays2calendar
(self, year, month)
Return a matrix representing a month's calendar.
Each row represents a week; week entries are
(day number, weekday number) tuples
Day numbers outside this month
are zero.

==============================
calendar.HTMLCalendar.monthdayscalendar
(self, year, month)
Return a matrix representing a month's calendar.
Each row represents a week; days outside this month are zero.

==============================
calendar.HTMLCalendar.setfirstweekday
(self, firstweekday)
None

==============================
calendar.HTMLCalendar.yeardatescalendar
(self, year, width=3)
Return the data for the specified year ready for formatting
The return
value is a list of month rows
Each month row contains up to width months.
Each month contains between 4 and 6 weeks and each week contains 1-7
days
Days are datetime.date objects.

==============================
calendar.HTMLCalendar.yeardays2calendar
(self, year, width=3)
Return the data for the specified year ready for formatting (similar to
yeardatescalendar())
Entries in the week lists are
(day number, weekday number) tuples
Day numbers outside this month are
zero.

==============================
calendar.HTMLCalendar.yeardayscalendar
(self, year, width=3)
Return the data for the specified year ready for formatting (similar to
yeardatescalendar())
Entries in the week lists are day numbers.
Day numbers outside this month are zero.

==============================
calendar.IllegalMonthError
(month)
Inappropriate argument value (of correct type).

==============================
calendar.IllegalMonthError.args
None

==============================
calendar.IllegalMonthError.with_traceback
Exception.with_traceback(tb) --
set self.__traceback__ to tb and return self.

==============================
calendar.IllegalWeekdayError
(weekday)
Inappropriate argument value (of correct type).

==============================
calendar.IllegalWeekdayError.args
None

==============================
calendar.IllegalWeekdayError.with_traceback
Exception.with_traceback(tb) --
set self.__traceback__ to tb and return self.

==============================
calendar.January
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
calendar.LocaleHTMLCalendar
(firstweekday=0, locale=None)
This class can be passed a locale name in the constructor and will return
month and weekday names in the specified locale
If this locale includes
an encoding all strings containing month and weekday names will be returned
as unicode.

==============================
calendar.LocaleHTMLCalendar.cssclass_month
str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object
If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.

==============================
calendar.LocaleHTMLCalendar.cssclass_month_head
str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object
If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.

==============================
calendar.LocaleHTMLCalendar.cssclass_noday
str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object
If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.

==============================
calendar.LocaleHTMLCalendar.cssclass_year
str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object
If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.

==============================
calendar.LocaleHTMLCalendar.cssclass_year_head
str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object
If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.

==============================
calendar.LocaleHTMLCalendar.cssclasses
Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

==============================
calendar.LocaleHTMLCalendar.cssclasses_weekday_head
Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

==============================
calendar.LocaleHTMLCalendar.firstweekday
None

==============================
calendar.LocaleHTMLCalendar.formatday
(self, day, weekday)
Return a day as a table cell.

==============================
calendar.LocaleHTMLCalendar.formatmonth
(self, theyear, themonth, withyear=True)
Return a formatted month as a table.

==============================
calendar.LocaleHTMLCalendar.formatmonthname
(self, theyear, themonth, withyear=True)
Return a month name as a table row.

==============================
calendar.LocaleHTMLCalendar.formatweek
(self, theweek)
Return a complete week as a table row.

==============================
calendar.LocaleHTMLCalendar.formatweekday
(self, day)
Return a weekday name as a table header.

==============================
calendar.LocaleHTMLCalendar.formatweekheader
(self)
Return a header for a week as a table row.

==============================
calendar.LocaleHTMLCalendar.formatyear
(self, theyear, width=3)
Return a formatted year as a table of tables.

==============================
calendar.LocaleHTMLCalendar.formatyearpage
(self, theyear, width=3, css='calendar.css', encoding=None)
Return a formatted year as a complete HTML page.

==============================
calendar.LocaleHTMLCalendar.getfirstweekday
(self)
None

==============================
calendar.LocaleHTMLCalendar.itermonthdates
(self, year, month)
Return an iterator for one month
The iterator will yield datetime.date
values and will always iterate through complete weeks, so it will yield
dates outside the specified month.

==============================
calendar.LocaleHTMLCalendar.itermonthdays
(self, year, month)
Like itermonthdates(), but will yield day numbers
For days outside
the specified month the day number is 0.

==============================
calendar.LocaleHTMLCalendar.itermonthdays2
(self, year, month)
Like itermonthdates(), but will yield (day number, weekday number)
tuples
For days outside the specified month the day number is 0.

==============================
calendar.LocaleHTMLCalendar.itermonthdays3
(self, year, month)
Like itermonthdates(), but will yield (year, month, day) tuples
 Can be
used for dates outside of datetime.date range.

==============================
calendar.LocaleHTMLCalendar.itermonthdays4
(self, year, month)
Like itermonthdates(), but will yield (year, month, day, day_of_week) tuples.
Can be used for dates outside of datetime.date range.

==============================
calendar.LocaleHTMLCalendar.iterweekdays
(self)
Return an iterator for one week of weekday numbers starting with the
configured first one.

==============================
calendar.LocaleHTMLCalendar.monthdatescalendar
(self, year, month)
Return a matrix (list of lists) representing a month's calendar.
Each row represents a week; week entries are datetime.date values.

==============================
calendar.LocaleHTMLCalendar.monthdays2calendar
(self, year, month)
Return a matrix representing a month's calendar.
Each row represents a week; week entries are
(day number, weekday number) tuples
Day numbers outside this month
are zero.

==============================
calendar.LocaleHTMLCalendar.monthdayscalendar
(self, year, month)
Return a matrix representing a month's calendar.
Each row represents a week; days outside this month are zero.

==============================
calendar.LocaleHTMLCalendar.setfirstweekday
(self, firstweekday)
None

==============================
calendar.LocaleHTMLCalendar.yeardatescalendar
(self, year, width=3)
Return the data for the specified year ready for formatting
The return
value is a list of month rows
Each month row contains up to width months.
Each month contains between 4 and 6 weeks and each week contains 1-7
days
Days are datetime.date objects.

==============================
calendar.LocaleHTMLCalendar.yeardays2calendar
(self, year, width=3)
Return the data for the specified year ready for formatting (similar to
yeardatescalendar())
Entries in the week lists are
(day number, weekday number) tuples
Day numbers outside this month are
zero.

==============================
calendar.LocaleHTMLCalendar.yeardayscalendar
(self, year, width=3)
Return the data for the specified year ready for formatting (similar to
yeardatescalendar())
Entries in the week lists are day numbers.
Day numbers outside this month are zero.

==============================
calendar.LocaleTextCalendar
(firstweekday=0, locale=None)
This class can be passed a locale name in the constructor and will return
month and weekday names in the specified locale
If this locale includes
an encoding all strings containing month and weekday names will be returned
as unicode.

==============================
calendar.LocaleTextCalendar.firstweekday
None

==============================
calendar.LocaleTextCalendar.formatday
(self, day, weekday, width)
Returns a formatted day.

==============================
calendar.LocaleTextCalendar.formatmonth
(self, theyear, themonth, w=0, l=0)
Return a month's calendar string (multi-line).

==============================
calendar.LocaleTextCalendar.formatmonthname
(self, theyear, themonth, width, withyear=True)
Return a formatted month name.

==============================
calendar.LocaleTextCalendar.formatweek
(self, theweek, width)
Returns a single week in a string (no newline).

==============================
calendar.LocaleTextCalendar.formatweekday
(self, day, width)
Returns a formatted week day name.

==============================
calendar.LocaleTextCalendar.formatweekheader
(self, width)
Return a header for a week.

==============================
calendar.LocaleTextCalendar.formatyear
(self, theyear, w=2, l=1, c=6, m=3)
Returns a year's calendar as a multi-line string.

==============================
calendar.LocaleTextCalendar.getfirstweekday
(self)
None

==============================
calendar.LocaleTextCalendar.itermonthdates
(self, year, month)
Return an iterator for one month
The iterator will yield datetime.date
values and will always iterate through complete weeks, so it will yield
dates outside the specified month.

==============================
calendar.LocaleTextCalendar.itermonthdays
(self, year, month)
Like itermonthdates(), but will yield day numbers
For days outside
the specified month the day number is 0.

==============================
calendar.LocaleTextCalendar.itermonthdays2
(self, year, month)
Like itermonthdates(), but will yield (day number, weekday number)
tuples
For days outside the specified month the day number is 0.

==============================
calendar.LocaleTextCalendar.itermonthdays3
(self, year, month)
Like itermonthdates(), but will yield (year, month, day) tuples
 Can be
used for dates outside of datetime.date range.

==============================
calendar.LocaleTextCalendar.itermonthdays4
(self, year, month)
Like itermonthdates(), but will yield (year, month, day, day_of_week) tuples.
Can be used for dates outside of datetime.date range.

==============================
calendar.LocaleTextCalendar.iterweekdays
(self)
Return an iterator for one week of weekday numbers starting with the
configured first one.

==============================
calendar.LocaleTextCalendar.monthdatescalendar
(self, year, month)
Return a matrix (list of lists) representing a month's calendar.
Each row represents a week; week entries are datetime.date values.

==============================
calendar.LocaleTextCalendar.monthdays2calendar
(self, year, month)
Return a matrix representing a month's calendar.
Each row represents a week; week entries are
(day number, weekday number) tuples
Day numbers outside this month
are zero.

==============================
calendar.LocaleTextCalendar.monthdayscalendar
(self, year, month)
Return a matrix representing a month's calendar.
Each row represents a week; days outside this month are zero.

==============================
calendar.LocaleTextCalendar.prmonth
(self, theyear, themonth, w=0, l=0)
Print a month's calendar.

==============================
calendar.LocaleTextCalendar.prweek
(self, theweek, width)
Print a single week (no newline).

==============================
calendar.LocaleTextCalendar.pryear
(self, theyear, w=0, l=0, c=6, m=3)
Print a year's calendar.

==============================
calendar.LocaleTextCalendar.setfirstweekday
(self, firstweekday)
None

==============================
calendar.LocaleTextCalendar.yeardatescalendar
(self, year, width=3)
Return the data for the specified year ready for formatting
The return
value is a list of month rows
Each month row contains up to width months.
Each month contains between 4 and 6 weeks and each week contains 1-7
days
Days are datetime.date objects.

==============================
calendar.LocaleTextCalendar.yeardays2calendar
(self, year, width=3)
Return the data for the specified year ready for formatting (similar to
yeardatescalendar())
Entries in the week lists are
(day number, weekday number) tuples
Day numbers outside this month are
zero.

==============================
calendar.LocaleTextCalendar.yeardayscalendar
(self, year, width=3)
Return the data for the specified year ready for formatting (similar to
yeardatescalendar())
Entries in the week lists are day numbers.
Day numbers outside this month are zero.

==============================
calendar.MONDAY
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
calendar.SATURDAY
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
calendar.SUNDAY
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
calendar.THURSDAY
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
calendar.TUESDAY
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
calendar.TextCalendar
(firstweekday=0)
Subclass of Calendar that outputs a calendar as a simple plain text
similar to the UNIX program cal.

==============================
calendar.TextCalendar.firstweekday
None

==============================
calendar.TextCalendar.formatday
(self, day, weekday, width)
Returns a formatted day.

==============================
calendar.TextCalendar.formatmonth
(self, theyear, themonth, w=0, l=0)
Return a month's calendar string (multi-line).

==============================
calendar.TextCalendar.formatmonthname
(self, theyear, themonth, width, withyear=True)
Return a formatted month name.

==============================
calendar.TextCalendar.formatweek
(self, theweek, width)
Returns a single week in a string (no newline).

==============================
calendar.TextCalendar.formatweekday
(self, day, width)
Returns a formatted week day name.

==============================
calendar.TextCalendar.formatweekheader
(self, width)
Return a header for a week.

==============================
calendar.TextCalendar.formatyear
(self, theyear, w=2, l=1, c=6, m=3)
Returns a year's calendar as a multi-line string.

==============================
calendar.TextCalendar.getfirstweekday
(self)
None

==============================
calendar.TextCalendar.itermonthdates
(self, year, month)
Return an iterator for one month
The iterator will yield datetime.date
values and will always iterate through complete weeks, so it will yield
dates outside the specified month.

==============================
calendar.TextCalendar.itermonthdays
(self, year, month)
Like itermonthdates(), but will yield day numbers
For days outside
the specified month the day number is 0.

==============================
calendar.TextCalendar.itermonthdays2
(self, year, month)
Like itermonthdates(), but will yield (day number, weekday number)
tuples
For days outside the specified month the day number is 0.

==============================
calendar.TextCalendar.itermonthdays3
(self, year, month)
Like itermonthdates(), but will yield (year, month, day) tuples
 Can be
used for dates outside of datetime.date range.

==============================
calendar.TextCalendar.itermonthdays4
(self, year, month)
Like itermonthdates(), but will yield (year, month, day, day_of_week) tuples.
Can be used for dates outside of datetime.date range.

==============================
calendar.TextCalendar.iterweekdays
(self)
Return an iterator for one week of weekday numbers starting with the
configured first one.

==============================
calendar.TextCalendar.monthdatescalendar
(self, year, month)
Return a matrix (list of lists) representing a month's calendar.
Each row represents a week; week entries are datetime.date values.

==============================
calendar.TextCalendar.monthdays2calendar
(self, year, month)
Return a matrix representing a month's calendar.
Each row represents a week; week entries are
(day number, weekday number) tuples
Day numbers outside this month
are zero.

==============================
calendar.TextCalendar.monthdayscalendar
(self, year, month)
Return a matrix representing a month's calendar.
Each row represents a week; days outside this month are zero.

==============================
calendar.TextCalendar.prmonth
(self, theyear, themonth, w=0, l=0)
Print a month's calendar.

==============================
calendar.TextCalendar.prweek
(self, theweek, width)
Print a single week (no newline).

==============================
calendar.TextCalendar.pryear
(self, theyear, w=0, l=0, c=6, m=3)
Print a year's calendar.

==============================
calendar.TextCalendar.setfirstweekday
(self, firstweekday)
None

==============================
calendar.TextCalendar.yeardatescalendar
(self, year, width=3)
Return the data for the specified year ready for formatting
The return
value is a list of month rows
Each month row contains up to width months.
Each month contains between 4 and 6 weeks and each week contains 1-7
days
Days are datetime.date objects.

==============================
calendar.TextCalendar.yeardays2calendar
(self, year, width=3)
Return the data for the specified year ready for formatting (similar to
yeardatescalendar())
Entries in the week lists are
(day number, weekday number) tuples
Day numbers outside this month are
zero.

==============================
calendar.TextCalendar.yeardayscalendar
(self, year, width=3)
Return the data for the specified year ready for formatting (similar to
yeardatescalendar())
Entries in the week lists are day numbers.
Day numbers outside this month are zero.

==============================
calendar.WEDNESDAY
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
calendar.c
Subclass of Calendar that outputs a calendar as a simple plain text
similar to the UNIX program cal.

==============================
calendar.calendar
(theyear, w=2, l=1, c=6, m=3)
Returns a year's calendar as a multi-line string.

==============================
calendar.datetime
Fast implementation of the datetime type.

==============================
calendar.day_abbr
None

==============================
calendar.day_name
None

==============================
calendar.different_locale
(locale)
None

==============================
calendar.error
Inappropriate argument value (of correct type).

==============================
calendar.error.args
None

==============================
calendar.error.with_traceback
Exception.with_traceback(tb) --
set self.__traceback__ to tb and return self.

==============================
calendar.firstweekday
()
None

==============================
calendar.format
(cols, colwidth=20, spacing=6)
Prints multi-column formatting for year calendars

==============================
calendar.formatstring
(cols, colwidth=20, spacing=6)
Returns a string formatted from n strings, centered within n columns.

==============================
calendar.isleap
(year)
Return True for leap years, False for non-leap years.

==============================
calendar.leapdays
(y1, y2)
Return number of leap years in range [y1, y2).
Assume y1 <= y2.

==============================
calendar.main
(args)
None

==============================
calendar.mdays
Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

==============================
calendar.month
(theyear, themonth, w=0, l=0)
Return a month's calendar string (multi-line).

==============================
calendar.month_abbr
None

==============================
calendar.month_name
None

==============================
calendar.monthcalendar
(year, month)
Return a matrix representing a month's calendar.
Each row represents a week; days outside this month are zero.

==============================
calendar.monthrange
(year, month)
Return weekday (0-6 ~ Mon-Sun) and number of days (28-31) for
year, month.

==============================
calendar.prcal
(theyear, w=0, l=0, c=6, m=3)
Print a year's calendar.

==============================
calendar.prmonth
(theyear, themonth, w=0, l=0)
Print a month's calendar.

==============================
calendar.prweek
(theweek, width)
Print a single week (no newline).

==============================
calendar.repeat
repeat(object [,times]) -> create an iterator which returns the object
for the specified number of times
 If not specified, returns the object
endlessly.

==============================
calendar.setfirstweekday
(firstweekday)
None

==============================
calendar.sys
This module provides access to some objects used or maintained by the
interpreter and to functions that interact strongly with the interpreter.

Dynamic objects:

argv -- command line arguments; argv[0] is the script pathname if known
path -- module search path; path[0] is the script directory, else ''
modules -- dictionary of loaded modules

displayhook -- called to show results in an interactive session
excepthook -- called to handle any uncaught exception other than SystemExit
  To customize printing in an interactive session or to install a custom
  top-level exception handler, assign other functions to replace these.

stdin -- standard input file object; used by input()
stdout -- standard output file object; used by print()
stderr -- standard error object; used for error messages
  By assigning other file objects (or objects that behave like files)
  to these, it is possible to redirect all of the interpreter's I/O.

last_type -- type of last uncaught exception
last_value -- value of last uncaught exception
last_traceback -- traceback of last uncaught exception
  These three are only available in an interactive session after a
  traceback has been printed.

Static objects:

builtin_module_names -- tuple of module names built into this interpreter
copyright -- copyright notice pertaining to this interpreter
exec_prefix -- prefix used to find the machine-specific Python library
executable -- absolute path of the executable binary of the Python interpreter
float_info -- a named tuple with information about the float implementation.
float_repr_style -- string indicating the style of repr() output for floats
hash_info -- a named tuple with information about the hash algorithm.
hexversion -- version information encoded as a single integer
implementation -- Python implementation information.
int_info -- a named tuple with information about the int implementation.
maxsize -- the largest supported length of containers.
maxunicode -- the value of the largest Unicode code point
platform -- platform identifier
prefix -- prefix used to find the Python library
thread_info -- a named tuple with information about the thread implementation.
version -- the version of this interpreter as a string
version_info -- version information as a named tuple
__stdin__ -- the original stdin; don't touch!
__stdout__ -- the original stdout; don't touch!
__stderr__ -- the original stderr; don't touch!
__displayhook__ -- the original displayhook; don't touch!
__excepthook__ -- the original excepthook; don't touch!

Functions:

displayhook() -- print an object to the screen, and save it in builtins._
excepthook() -- print an exception and its traceback to sys.stderr
exc_info() -- return thread-safe information about the current exception
exit() -- exit the interpreter by raising SystemExit
getdlopenflags() -- returns flags to be used for dlopen() calls
getprofile() -- get the global profiling function
getrefcount() -- return the reference count for an object (plus one :-)
getrecursionlimit() -- return the max recursion depth for the interpreter
getsizeof() -- return the size of an object in bytes
gettrace() -- get the global debug tracing function
setcheckinterval() -- control how often the interpreter checks for events
setdlopenflags() -- set the flags to be used for dlopen() calls
setprofile() -- set the global profiling function
setrecursionlimit() -- set the max recursion depth for the interpreter
settrace() -- set the global debug tracing function

==============================
calendar.timegm
(tuple)
Unrelated but handy function to calculate Unix timestamp from GMT.

==============================
calendar.week
(theweek, width)
Returns a single week in a string (no newline).

==============================
calendar.weekday
(year, month, day)
Return weekday (0-6 ~ Mon-Sun) for year, month (1-12), day (1-31).

==============================
calendar.weekheader
(width)
Return a header for a week.

