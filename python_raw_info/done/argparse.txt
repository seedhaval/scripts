==============================
argparse.Action
(option_strings, dest, nargs=None, const=None, default=None, type=None, choices=None, required=False, help=None, metavar=None)
- option_strings -- A list of command-line option strings which should be associated with this action.
- dest -- The name of the attribute to hold the created object(s)
- nargs -- The number of command-line arguments that should be consumed
By default, one argument will be consumed and a single value will be produced
- N (an integer) consumes N arguments (and produces a list)
- '?' consumes zero or one arguments
- '*' consumes zero or more arguments (and produces a list)
- '+' consumes one or more arguments (and produces a list)
Note that the difference between the default and nargs=1 is that with the default, a single value will be produced, while with nargs=1, a list containing a single value will be produced.
- const -- The value to be produced if the option is specified and the option uses an action that takes no values.
- default -- The value to be produced if the option is not specified.
- type -- A callable that accepts a single string argument, and returns the converted value
The standard Python types str, int, float, and complex are useful examples of such callables If None, str is used.
- choices -- A container of values that should be allowed
If not None, after a command-line argument has been converted to the appropriate type, an exception will be raised if it is not a member of this collection.
- required -- True if the action must always be specified at the command line This is only meaningful for optional command-line arguments.
- help -- The help string describing the argument.
- metavar -- The name to be used for the option's argument with the help string If None, the 'dest' value will be used as the name.
==============================
argparse.ArgumentParser
(prog=None, usage=None, description=None, epilog=None, parents=[], formatter_class=<class 'argparse.HelpFormatter'>, prefix_chars='-', fromfile_prefix_chars=None, argument_default=None, conflict_handler='error', add_help=True, allow_abbrev=True)
Object for parsing command line strings into Python objects.
- prog -- The name of the program (default: sys.argv[0])
- usage -- A usage message (default: auto-generated from arguments)
- description -- A description of what the program does
- epilog -- Text following the argument descriptions
- parents -- Parsers whose arguments should be copied into this one
- formatter_class -- HelpFormatter class for printing help messages
- prefix_chars -- Characters that prefix optional arguments
- fromfile_prefix_chars -- Characters that prefix files containing
- argument_default -- The default value for all arguments
- conflict_handler -- String indicating how to handle conflicts
- add_help -- Add a -h/-help option
- allow_abbrev -- Allow long options to be abbreviated unambiguously
==============================
argparse.ArgumentParser.add_argument
(self, *args, **kwargs)
add_argument(dest, ..., name=value, ...)
add_argument(option_string, option_string, ..., name=value, ...)
==============================
argparse.ArgumentParser.add_argument_group
(self, *args, **kwargs)
None
==============================
argparse.ArgumentParser.add_mutually_exclusive_group
(self, **kwargs)
None
==============================
argparse.ArgumentParser.add_subparsers
(self, **kwargs)
None
==============================
argparse.ArgumentParser.convert_arg_line_to_args
(self, arg_line)
None
==============================
argparse.ArgumentParser.get_default
(self, dest)
None
==============================
argparse.ArgumentParser.parse_args
(self, args=None, namespace=None)
None
==============================
argparse.ArgumentParser.parse_intermixed_args
(self, args=None, namespace=None)
None
==============================
argparse.ArgumentParser.parse_known_args
(self, args=None, namespace=None)
None
==============================
argparse.ArgumentParser.parse_known_intermixed_args
(self, args=None, namespace=None)
None
==============================
argparse.ArgumentParser.print_help
(self, file=None)
None
==============================
argparse.ArgumentParser.print_usage
(self, file=None)
None
==============================
argparse.ArgumentParser.register
(self, registry_name, value, object)
None
==============================
argparse.ArgumentParser.set_defaults
(self, **kwargs)
None
==============================
argparse.FileType
(mode='r', bufsize=-1, encoding=None, errors=None)
Factory for creating file object types
Instances of FileType are typically passed as type= arguments to the ArgumentParser add_argument() method.
- mode -- A string indicating how the file is to be opened Accepts the same values as the builtin open() function.
- bufsize -- The file's desired buffer size Accepts the same values as the builtin open() function.
- encoding -- The file's encoding Accepts the same values as the builtin open() function.
- errors -- A string indicating how encoding and decoding errors are to be handled Accepts the same value as the builtin open() function.
==============================
argparse.Namespace
(**kwargs)
Simple object for storing attributes.
Implements equality by attribute names and values, and provides a simple string representation.
==============================
argparse.ONE_OR_MORE
==============================
argparse.OPTIONAL
==============================
argparse.PARSER
==============================
argparse.REMAINDER
==============================
argparse.SUPPRESS
==============================
argparse.ZERO_OR_MORE
==============================
argparse.ngettext
(msgid1, msgid2, n)
None
