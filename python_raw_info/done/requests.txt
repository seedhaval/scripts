==============================
requests.PreparedRequest
()
The fully mutable :class:`PreparedRequest <PreparedRequest>` object, containing the exact bytes that will be sent to the server.
Generated from either a :class:`Request <Request>` object or manually.
==============================
requests.PreparedRequest.copy
(self)
None
==============================
requests.PreparedRequest.deregister_hook
(self, event, hook)
Deregister a previously registered hook.
Returns True if the hook existed, False if not.
==============================
requests.PreparedRequest.path_url
Build the path URL to use.
==============================
requests.PreparedRequest.prepare
(self, method=None, url=None, headers=None, files=None, data=None, params=None, auth=None, cookies=None, hooks=None, json=None)
Prepares the entire request with the given parameters.
==============================
requests.PreparedRequest.prepare_auth
(self, auth, url='')
Prepares the given HTTP auth data.
==============================
requests.PreparedRequest.prepare_body
(self, data, files, json=None)
Prepares the given HTTP body data.
==============================
requests.PreparedRequest.prepare_content_length
(self, body)
Prepare Content-Length header based on request method and body
==============================
requests.PreparedRequest.prepare_cookies
(self, cookies)
Prepares the given HTTP cookie data.
This function eventually generates a ``Cookie`` header from the given cookies using cookielib
==============================
requests.PreparedRequest.prepare_headers
(self, headers)
Prepares the given HTTP headers.
==============================
requests.PreparedRequest.prepare_hooks
(self, hooks)
Prepares the given hooks.
==============================
requests.PreparedRequest.prepare_method
(self, method)
Prepares the given HTTP method.
==============================
requests.PreparedRequest.prepare_url
(self, url, params)
Prepares the given HTTP URL.
==============================
requests.PreparedRequest.register_hook
(self, event, hook)
Properly register a hook.
==============================
requests.Request
(method=None, url=None, headers=None, files=None, data=None, params=None, auth=None, cookies=None, hooks=None, json=None)
A user-created :class:`Request <Request>` object.
Used to prepare a :class:`PreparedRequest <PreparedRequest>`, which is sent to the server.
:param method: HTTP method to use.
:param url: URL to send.
:param headers: dictionary of headers to send.
:param files: dictionary of {filename: fileobject} files to multipart upload.
:param data: the body to attach to the request If a dictionary or list of tuples ``[(key, value)]`` is provided, form-encoding will take place.
:param json: json for the body to attach to the request (if files or data is not specified).
:param params: URL parameters to append to the URL If a dictionary or list of tuples ``[(key, value)]`` is provided, form-encoding will take place.
:param auth: Auth handler or (user, pass) tuple.
:param cookies: dictionary or CookieJar of cookies to attach to this request.
:param hooks: dictionary of callback hooks, for internal usage.
==============================
requests.Request.deregister_hook
(self, event, hook)
Deregister a previously registered hook.
Returns True if the hook existed, False if not.
==============================
requests.Request.prepare
(self)
Constructs a :class:`PreparedRequest <PreparedRequest>` for transmission and returns it.
==============================
requests.Request.register_hook
(self, event, hook)
Properly register a hook.
==============================
requests.RequestException
(*args, **kwargs)
There was an ambiguous exception that occurred while handling your
request.
==============================
requests.RequestException.args
None
==============================
requests.RequestException.characters_written
None
==============================
requests.RequestException.errno
POSIX exception code
==============================
requests.RequestException.filename
exception filename
==============================
requests.RequestException.filename2
second exception filename
==============================
requests.RequestException.strerror
exception strerror
==============================
requests.RequestException.with_traceback
Exception.with_traceback(tb) --
set self.__traceback__ to tb and return self.
==============================
requests.RequestsDependencyWarning
An imported dependency doesn't match the expected version range.
==============================
requests.RequestsDependencyWarning.args
None
==============================
requests.RequestsDependencyWarning.with_traceback
Exception.with_traceback(tb) --
set self.__traceback__ to tb and return self.
==============================
requests.Response
()
The :class:`Response <Response>` object, which contains a
server's response to an HTTP request.
==============================
requests.Response.apparent_encoding
The apparent encoding, provided by the chardet library.
==============================
requests.Response.close
(self)
==============================
requests.Response.content
Content of the response, in bytes.
==============================
requests.Response.is_permanent_redirect
True if this Response one of the permanent versions of redirect.
==============================
requests.Response.is_redirect
True if this Response is a well-formed HTTP redirect that could have
been processed automatically (by :meth:`Session.resolve_redirects`).
==============================
requests.Response.iter_content
(self, chunk_size=1, decode_unicode=False)
Iterates over the response data
When stream=True is set on the request, this avoids reading the content at once into memory for large responses
The chunk size is the number of bytes it should read into memory This is not necessarily the length of each item returned as decoding can take place.  chunk_size must be of type int or None
A value of None will function differently depending on the value of `stream`.  stream=True will read data as it arrives in whatever size the chunks are received
If stream=False, data is returned as a single chunk.
If decode_unicode is True, content will be decoded using the best available encoding based on the response.
==============================
requests.Response.iter_lines
(self, chunk_size=512, decode_unicode=False, delimiter=None)
Iterates over the response data, one line at a time
When stream=True is set on the request, this avoids reading the content at once into memory for large responses.
==============================
requests.Response.json
(self, **kwargs)
Returns the json-encoded content of a response, if any.
:param \*\*kwargs: Optional arguments that ``json.loads`` takes.
:raises ValueError: If the response body does not contain valid json.
==============================
requests.Response.links
Returns the parsed header links of the response, if any.
==============================
requests.Response.next
Returns a PreparedRequest for the next request in a redirect chain, if there is one.
==============================
requests.Response.ok
Returns True if :attr:`status_code` is less than 400, False if not.
This attribute checks if the status code of the response is between 400 and 600 to see if there was a client error or a server error
If the status code is between 200 and 400, this will return True
This is **not** a check to see if the response code is ``200 OK``.
==============================
requests.Response.raise_for_status
(self)
Raises stored :class:`HTTPError`, if one occurred.
==============================
requests.Response.text
Content of the response, in unicode.
If Response.encoding is None, encoding will be guessed using ``chardet``.
The encoding of the response content is determined based solely on HTTP headers, following RFC 2616 to the letter
If you can take advantage of non-HTTP knowledge to make a better guess at the encoding, you should set ``r.encoding`` appropriately before accessing this property.
==============================
requests.Session
()
A Requests session.
Provides cookie persistence, connection-pooling, and configuration.
==============================
requests.Session.close
(self)
Closes all adapters and as such the session
==============================
requests.Session.delete
(self, url, **kwargs)
Sends a DELETE request
Returns :class:`Response` object.
:param url: URL for the new :class:`Request` object.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:rtype: requests.Response
==============================
requests.Session.get
(self, url, **kwargs)
Sends a GET request
Returns :class:`Response` object.
:param url: URL for the new :class:`Request` object.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:rtype: requests.Response
==============================
requests.Session.get_adapter
(self, url)
Returns the appropriate connection adapter for the given URL.
:rtype: requests.adapters.BaseAdapter
==============================
requests.Session.get_redirect_target
(self, resp)
Receives a Response
Returns a redirect URI or ``None``
==============================
requests.Session.head
(self, url, **kwargs)
Sends a HEAD request
Returns :class:`Response` object.
:param url: URL for the new :class:`Request` object.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:rtype: requests.Response
==============================
requests.Session.merge_environment_settings
(self, url, proxies, stream, verify, cert)
Check the environment and merge it with some settings.
:rtype: dict
==============================
requests.Session.mount
(self, prefix, adapter)
Registers a connection adapter to a prefix.
Adapters are sorted in descending order by prefix length.
==============================
requests.Session.options
(self, url, **kwargs)
Sends a OPTIONS request
Returns :class:`Response` object.
:param url: URL for the new :class:`Request` object.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:rtype: requests.Response
==============================
requests.Session.patch
(self, url, data=None, **kwargs)
Sends a PATCH request
Returns :class:`Response` object.
:param url: URL for the new :class:`Request` object.
:param data: (optional) Dictionary, list of tuples, bytes, or file-like object to send in the body of the :class:`Request`.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:rtype: requests.Response
==============================
requests.Session.post
(self, url, data=None, json=None, **kwargs)
Sends a POST request
Returns :class:`Response` object.
:param url: URL for the new :class:`Request` object.
:param data: (optional) Dictionary, list of tuples, bytes, or file-like object to send in the body of the :class:`Request`.
:param json: (optional) json to send in the body of the :class:`Request`.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:rtype: requests.Response
==============================
requests.Session.prepare_request
(self, request)
Constructs a :class:`PreparedRequest <PreparedRequest>` for
transmission and returns it
The :class:`PreparedRequest` has settings merged from the :class:`Request <Request>` instance and those of the
:class:`Session`.
:param request: :class:`Request` instance to prepare with this session's settings.
:rtype: requests.PreparedRequest
==============================
requests.Session.put
(self, url, data=None, **kwargs)
Sends a PUT request
Returns :class:`Response` object.
:param url: URL for the new :class:`Request` object.
:param data: (optional) Dictionary, list of tuples, bytes, or file-like object to send in the body of the :class:`Request`.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:rtype: requests.Response
==============================
requests.Session.rebuild_auth
(self, prepared_request, response)
When being redirected we may want to strip authentication from the request to avoid leaking credentials
This method intelligently removes and reapplies authentication where possible to avoid credential loss.
==============================
requests.Session.rebuild_method
(self, prepared_request, response)
When being redirected we may want to change the method of the request based on certain specs or browser behavior.
==============================
requests.Session.rebuild_proxies
(self, prepared_request, proxies)
This method re-evaluates the proxy configuration by considering the environment variables
If we are redirected to a URL covered by NO_PROXY, we strip the proxy configuration Otherwise, we set missing proxy keys for this URL (in case they were stripped by a previous redirect).
This method also replaces the Proxy-Authorization header where necessary.
:rtype: dict
==============================
requests.Session.request
(self, method, url, params=None, data=None, headers=None, cookies=None, files=None, auth=None, timeout=None, allow_redirects=True, proxies=None, hooks=None, stream=None, verify=None, cert=None, json=None)
Constructs a :class:`Request <Request>`, prepares it and sends it.
==============================
requests.Session.resolve_redirects
(self, resp, req, stream=False, timeout=None, verify=True, cert=None, proxies=None, yield_requests=False, **adapter_kwargs)
Receives a Response
Returns a generator of Responses or Requests.
==============================
requests.Session.send
(self, request, **kwargs)
Send a given PreparedRequest.
:rtype: requests.Response
==============================
requests.Session.should_strip_auth
(self, old_url, new_url)
Decide whether Authorization header should be removed when redirecting
==============================
requests.codes
Dictionary lookup object.
==============================
requests.cryptography_version
==============================
requests.delete
(url, **kwargs)
Sends a DELETE request.
:param url: URL for the new :class:`Request` object.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:return: :class:`Response <Response>` object
:rtype: requests.Response
==============================
requests.get
(url, params=None, **kwargs)
Sends a GET request.
:param url: URL for the new :class:`Request` object.
:param params: (optional) Dictionary, list of tuples or bytes to send in the query string for the :class:`Request`.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:return: :class:`Response <Response>` object
:rtype: requests.Response
==============================
requests.head
(url, **kwargs)
Sends a HEAD request.
:param url: URL for the new :class:`Request` object.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:return: :class:`Response <Response>` object
:rtype: requests.Response
==============================
requests.options
(url, **kwargs)
Sends an OPTIONS request.
:param url: URL for the new :class:`Request` object.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:return: :class:`Response <Response>` object
:rtype: requests.Response
==============================
requests.packages
None
==============================
requests.patch
(url, data=None, **kwargs)
Sends a PATCH request.
:param url: URL for the new :class:`Request` object.
:param data: (optional) Dictionary, list of tuples, bytes, or file-like object to send in the body of the :class:`Request`.
:param json: (optional) json data to send in the body of the :class:`Request`.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:return: :class:`Response <Response>` object
:rtype: requests.Response
==============================
requests.post
(url, data=None, json=None, **kwargs)
Sends a POST request.
:param url: URL for the new :class:`Request` object.
:param data: (optional) Dictionary, list of tuples, bytes, or file-like object to send in the body of the :class:`Request`.
:param json: (optional) json data to send in the body of the :class:`Request`.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:return: :class:`Response <Response>` object
:rtype: requests.Response
==============================
requests.put
(url, data=None, **kwargs)
Sends a PUT request.
:param url: URL for the new :class:`Request` object.
:param data: (optional) Dictionary, list of tuples, bytes, or file-like object to send in the body of the :class:`Request`.
:param json: (optional) json data to send in the body of the :class:`Request`.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:return: :class:`Response <Response>` object
:rtype: requests.Response
==============================
requests.request
(method, url, **kwargs)
Constructs and sends a :class:`Request <Request>`.
:param method: method for the new :class:`Request` object.
:param url: URL for the new :class:`Request` object.
:param params: (optional) Dictionary, list of tuples or bytes to send in the query string for the :class:`Request`.
:param data: (optional) Dictionary, list of tuples, bytes, or file-like object to send in the body of the :class:`Request`.
:param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.
:param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.
:param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.
:param files: (optional) Dictionary of ``'name': file-like-objects`` (or ``{'name': file-tuple}``) for multipart encoding upload.
:param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.
:param timeout: (optional) How many seconds to wait for the server to send data before giving up, as a float, or a :ref:`(connect timeout, read timeout) <timeouts>` tuple.  :type timeout: float or tuple
:param allow_redirects: (optional) Boolean Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection Defaults to ``True``.  :type allow_redirects: bool
:param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.
:param verify: (optional) Either a boolean, in which case it controls whether we verify the server's TLS certificate, or a string, in which case it must be a path to a CA bundle to use Defaults to ``True``.
:param stream: (optional) if ``False``, the response content will be immediately downloaded.
:param cert: (optional) if String, path to ssl client cert file (.pem) If Tuple, ('cert', 'key') pair.
:return: :class:`Response <Response>` object
:rtype: requests.Response
==============================
requests.status_codes
The ``codes`` object defines a mapping from common names for HTTP statuses to their numerical codes, accessible either as attributes or as dictionary items.
