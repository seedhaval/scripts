random.choice
(seq)
Choose a random element from a non-empty sequence.
==============================
random.getrandbits
(k, /)
getrandbits(k) -> x
 Generates an int with k random bits.
==============================
random.getstate
()
Return internal state; can be passed to setstate() later.
==============================
random.randint
(a, b)
Return random integer in range [a, b], including both end points.
==============================
random.random
()
random() -> x in the interval [0, 1).
==============================
random.randrange
(start, stop=None, step=1, _int=<class 'int'>)
Choose a random item from range(start, stop[, step]).
This fixes the problem with randint() which includes the endpoint; in Python this is usually not what you want.
==============================
random.sample
(population, k)
Chooses k unique random elements from a population sequence or set.
==============================
random.seed
(a=None, version=2)
Initialize internal state from hashable object.
If *a* is an int, all bits are used.
For version 2 (the default), all of the bits are used if *a* is a str, bytes, or bytearray
==============================
random.setstate
(state)
Restore internal state from object returned by getstate().
==============================
random.shuffle
(x, random=None)
Shuffle list x in place, and return None.
Optional argument random is a 0-argument function returning a random float in [0.0, 1.0); if it is the default None, the standard random.random will be used.
