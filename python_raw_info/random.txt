==============================
random.BPF
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
random.LOG4
Convert a string or number to a floating point number, if possible.

==============================
random.NV_MAGICCONST
Convert a string or number to a floating point number, if possible.

==============================
random.RECIP_BPF
Convert a string or number to a floating point number, if possible.

==============================
random.Random
(x=None)
Random number generator base class used by bound module functions.

Used to instantiate instances of Random to get generators that don't
share state.

Class Random can also be subclassed if you want to use a different basic
generator of your own devising: in that case, override the following
methods:  random(), seed(), getstate(), and setstate().
Optionally, implement a getrandbits() method so that randrange()
can cover arbitrarily large ranges.

==============================
random.Random.VERSION
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
random.Random.betavariate
(self, alpha, beta)
Beta distribution.

Conditions on the parameters are alpha > 0 and beta > 0.
Returned values range between 0 and 1.

==============================
random.Random.choice
(self, seq)
Choose a random element from a non-empty sequence.

==============================
random.Random.choices
(self, population, weights=None, *, cum_weights=None, k=1)
Return a k sized list of population elements chosen with replacement.

If the relative weights or cumulative weights are not specified,
the selections are made with equal probability.

==============================
random.Random.expovariate
(self, lambd)
Exponential distribution.

lambd is 1.0 divided by the desired mean
 It should be
nonzero
 (The parameter would be called "lambda", but that is
a reserved word in Python.)  Returned values range from 0 to
positive infinity if lambd is positive, and from negative
infinity to 0 if lambd is negative.

==============================
random.Random.gammavariate
(self, alpha, beta)
Gamma distribution
 Not the gamma function!

Conditions on the parameters are alpha > 0 and beta > 0.

The probability distribution function is:

            x ** (alpha - 1) * math.exp(-x / beta)
  pdf(x) =  --------------------------------------
              math.gamma(alpha) * beta ** alpha

==============================
random.Random.gauss
(self, mu, sigma)
Gaussian distribution.

mu is the mean, and sigma is the standard deviation
 This is
slightly faster than the normalvariate() function.

Not thread-safe without a lock around calls.

==============================
random.Random.getrandbits
(self, k, /)
getrandbits(k) -> x
 Generates an int with k random bits.

==============================
random.Random.getstate
(self)
Return internal state; can be passed to setstate() later.

==============================
random.Random.lognormvariate
(self, mu, sigma)
Log normal distribution.

If you take the natural logarithm of this distribution, you'll get a
normal distribution with mean mu and standard deviation sigma.
mu can have any value, and sigma must be greater than zero.

==============================
random.Random.normalvariate
(self, mu, sigma)
Normal distribution.

mu is the mean, and sigma is the standard deviation.

==============================
random.Random.paretovariate
(self, alpha)
Pareto distribution
 alpha is the shape parameter.

==============================
random.Random.randint
(self, a, b)
Return random integer in range [a, b], including both end points.
        

==============================
random.Random.random
(self, /)
random() -> x in the interval [0, 1).

==============================
random.Random.randrange
(self, start, stop=None, step=1, _int=<class 'int'>)
Choose a random item from range(start, stop[, step]).

This fixes the problem with randint() which includes the
endpoint; in Python this is usually not what you want.

==============================
random.Random.sample
(self, population, k)
Chooses k unique random elements from a population sequence or set.

Returns a new list containing elements from the population while
leaving the original population unchanged
 The resulting list is
in selection order so that all sub-slices will also be valid random
samples
 This allows raffle winners (the sample) to be partitioned
into grand prize and second place winners (the subslices).

Members of the population need not be hashable or unique
 If the
population contains repeats, then each occurrence is a possible
selection in the sample.

To choose a sample in a range of integers, use range as an argument.
This is especially fast and space efficient for sampling from a
large population:   sample(range(10000000), 60)

==============================
random.Random.seed
(self, a=None, version=2)
Initialize internal state from hashable object.

None or no argument seeds from current time or from an operating
system specific randomness source if available.

If *a* is an int, all bits are used.

For version 2 (the default), all of the bits are used if *a* is a str,
bytes, or bytearray
 For version 1 (provided for reproducing random
sequences from older versions of Python), the algorithm for str and
bytes generates a narrower range of seeds.

==============================
random.Random.setstate
(self, state)
Restore internal state from object returned by getstate().

==============================
random.Random.shuffle
(self, x, random=None)
Shuffle list x in place, and return None.

Optional argument random is a 0-argument function returning a
random float in [0.0, 1.0); if it is the default None, the
standard random.random will be used.

==============================
random.Random.triangular
(self, low=0.0, high=1.0, mode=None)
Triangular distribution.

Continuous distribution bounded by given lower and upper limits,
and having a given mode value in-between.

http://en.wikipedia.org/wiki/Triangular_distribution

==============================
random.Random.uniform
(self, a, b)
Get a random number in the range [a, b) or [a, b] depending on rounding.

==============================
random.Random.vonmisesvariate
(self, mu, kappa)
Circular data distribution.

mu is the mean angle, expressed in radians between 0 and 2*pi, and
kappa is the concentration parameter, which must be greater than or
equal to zero
 If kappa is equal to zero, this distribution reduces
to a uniform random angle over the range 0 to 2*pi.

==============================
random.Random.weibullvariate
(self, alpha, beta)
Weibull distribution.

alpha is the scale parameter and beta is the shape parameter.

==============================
random.SG_MAGICCONST
Convert a string or number to a floating point number, if possible.

==============================
random.SystemRandom
(x=None)
Alternate random number generator using sources provided
by the operating system (such as /dev/urandom on Unix or
CryptGenRandom on Windows).

 Not available on all systems (see os.urandom() for details).

==============================
random.SystemRandom.VERSION
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
random.SystemRandom.betavariate
(self, alpha, beta)
Beta distribution.

Conditions on the parameters are alpha > 0 and beta > 0.
Returned values range between 0 and 1.

==============================
random.SystemRandom.choice
(self, seq)
Choose a random element from a non-empty sequence.

==============================
random.SystemRandom.choices
(self, population, weights=None, *, cum_weights=None, k=1)
Return a k sized list of population elements chosen with replacement.

If the relative weights or cumulative weights are not specified,
the selections are made with equal probability.

==============================
random.SystemRandom.expovariate
(self, lambd)
Exponential distribution.

lambd is 1.0 divided by the desired mean
 It should be
nonzero
 (The parameter would be called "lambda", but that is
a reserved word in Python.)  Returned values range from 0 to
positive infinity if lambd is positive, and from negative
infinity to 0 if lambd is negative.

==============================
random.SystemRandom.gammavariate
(self, alpha, beta)
Gamma distribution
 Not the gamma function!

Conditions on the parameters are alpha > 0 and beta > 0.

The probability distribution function is:

            x ** (alpha - 1) * math.exp(-x / beta)
  pdf(x) =  --------------------------------------
              math.gamma(alpha) * beta ** alpha

==============================
random.SystemRandom.gauss
(self, mu, sigma)
Gaussian distribution.

mu is the mean, and sigma is the standard deviation
 This is
slightly faster than the normalvariate() function.

Not thread-safe without a lock around calls.

==============================
random.SystemRandom.getrandbits
(self, k)
getrandbits(k) -> x
 Generates an int with k random bits.

==============================
random.SystemRandom.getstate
(self, *args, **kwds)
Method should not be called for a system random number generator.

==============================
random.SystemRandom.lognormvariate
(self, mu, sigma)
Log normal distribution.

If you take the natural logarithm of this distribution, you'll get a
normal distribution with mean mu and standard deviation sigma.
mu can have any value, and sigma must be greater than zero.

==============================
random.SystemRandom.normalvariate
(self, mu, sigma)
Normal distribution.

mu is the mean, and sigma is the standard deviation.

==============================
random.SystemRandom.paretovariate
(self, alpha)
Pareto distribution
 alpha is the shape parameter.

==============================
random.SystemRandom.randint
(self, a, b)
Return random integer in range [a, b], including both end points.
        

==============================
random.SystemRandom.random
(self)
Get the next random number in the range [0.0, 1.0).

==============================
random.SystemRandom.randrange
(self, start, stop=None, step=1, _int=<class 'int'>)
Choose a random item from range(start, stop[, step]).

This fixes the problem with randint() which includes the
endpoint; in Python this is usually not what you want.

==============================
random.SystemRandom.sample
(self, population, k)
Chooses k unique random elements from a population sequence or set.

Returns a new list containing elements from the population while
leaving the original population unchanged
 The resulting list is
in selection order so that all sub-slices will also be valid random
samples
 This allows raffle winners (the sample) to be partitioned
into grand prize and second place winners (the subslices).

Members of the population need not be hashable or unique
 If the
population contains repeats, then each occurrence is a possible
selection in the sample.

To choose a sample in a range of integers, use range as an argument.
This is especially fast and space efficient for sampling from a
large population:   sample(range(10000000), 60)

==============================
random.SystemRandom.seed
(self, *args, **kwds)
Stub method
 Not used for a system random number generator.

==============================
random.SystemRandom.setstate
(self, *args, **kwds)
Method should not be called for a system random number generator.

==============================
random.SystemRandom.shuffle
(self, x, random=None)
Shuffle list x in place, and return None.

Optional argument random is a 0-argument function returning a
random float in [0.0, 1.0); if it is the default None, the
standard random.random will be used.

==============================
random.SystemRandom.triangular
(self, low=0.0, high=1.0, mode=None)
Triangular distribution.

Continuous distribution bounded by given lower and upper limits,
and having a given mode value in-between.

http://en.wikipedia.org/wiki/Triangular_distribution

==============================
random.SystemRandom.uniform
(self, a, b)
Get a random number in the range [a, b) or [a, b] depending on rounding.

==============================
random.SystemRandom.vonmisesvariate
(self, mu, kappa)
Circular data distribution.

mu is the mean angle, expressed in radians between 0 and 2*pi, and
kappa is the concentration parameter, which must be greater than or
equal to zero
 If kappa is equal to zero, this distribution reduces
to a uniform random angle over the range 0 to 2*pi.

==============================
random.SystemRandom.weibullvariate
(self, alpha, beta)
Weibull distribution.

alpha is the scale parameter and beta is the shape parameter.

==============================
random.TWOPI
Convert a string or number to a floating point number, if possible.

==============================
random.betavariate
(alpha, beta)
Beta distribution.

Conditions on the parameters are alpha > 0 and beta > 0.
Returned values range between 0 and 1.

==============================
random.choice
(seq)
Choose a random element from a non-empty sequence.

==============================
random.choices
(population, weights=None, *, cum_weights=None, k=1)
Return a k sized list of population elements chosen with replacement.

If the relative weights or cumulative weights are not specified,
the selections are made with equal probability.

==============================
random.expovariate
(lambd)
Exponential distribution.

lambd is 1.0 divided by the desired mean
 It should be
nonzero
 (The parameter would be called "lambda", but that is
a reserved word in Python.)  Returned values range from 0 to
positive infinity if lambd is positive, and from negative
infinity to 0 if lambd is negative.

==============================
random.gammavariate
(alpha, beta)
Gamma distribution
 Not the gamma function!

Conditions on the parameters are alpha > 0 and beta > 0.

The probability distribution function is:

            x ** (alpha - 1) * math.exp(-x / beta)
  pdf(x) =  --------------------------------------
              math.gamma(alpha) * beta ** alpha

==============================
random.gauss
(mu, sigma)
Gaussian distribution.

mu is the mean, and sigma is the standard deviation
 This is
slightly faster than the normalvariate() function.

Not thread-safe without a lock around calls.

==============================
random.getrandbits
(k, /)
getrandbits(k) -> x
 Generates an int with k random bits.

==============================
random.getstate
()
Return internal state; can be passed to setstate() later.

==============================
random.lognormvariate
(mu, sigma)
Log normal distribution.

If you take the natural logarithm of this distribution, you'll get a
normal distribution with mean mu and standard deviation sigma.
mu can have any value, and sigma must be greater than zero.

==============================
random.normalvariate
(mu, sigma)
Normal distribution.

mu is the mean, and sigma is the standard deviation.

==============================
random.paretovariate
(alpha)
Pareto distribution
 alpha is the shape parameter.

==============================
random.randint
(a, b)
Return random integer in range [a, b], including both end points.
        

==============================
random.random
()
random() -> x in the interval [0, 1).

==============================
random.randrange
(start, stop=None, step=1, _int=<class 'int'>)
Choose a random item from range(start, stop[, step]).

This fixes the problem with randint() which includes the
endpoint; in Python this is usually not what you want.

==============================
random.sample
(population, k)
Chooses k unique random elements from a population sequence or set.

Returns a new list containing elements from the population while
leaving the original population unchanged
 The resulting list is
in selection order so that all sub-slices will also be valid random
samples
 This allows raffle winners (the sample) to be partitioned
into grand prize and second place winners (the subslices).

Members of the population need not be hashable or unique
 If the
population contains repeats, then each occurrence is a possible
selection in the sample.

To choose a sample in a range of integers, use range as an argument.
This is especially fast and space efficient for sampling from a
large population:   sample(range(10000000), 60)

==============================
random.seed
(a=None, version=2)
Initialize internal state from hashable object.

None or no argument seeds from current time or from an operating
system specific randomness source if available.

If *a* is an int, all bits are used.

For version 2 (the default), all of the bits are used if *a* is a str,
bytes, or bytearray
 For version 1 (provided for reproducing random
sequences from older versions of Python), the algorithm for str and
bytes generates a narrower range of seeds.

==============================
random.setstate
(state)
Restore internal state from object returned by getstate().

==============================
random.shuffle
(x, random=None)
Shuffle list x in place, and return None.

Optional argument random is a 0-argument function returning a
random float in [0.0, 1.0); if it is the default None, the
standard random.random will be used.

==============================
random.triangular
(low=0.0, high=1.0, mode=None)
Triangular distribution.

Continuous distribution bounded by given lower and upper limits,
and having a given mode value in-between.

http://en.wikipedia.org/wiki/Triangular_distribution

==============================
random.uniform
(a, b)
Get a random number in the range [a, b) or [a, b] depending on rounding.

==============================
random.vonmisesvariate
(mu, kappa)
Circular data distribution.

mu is the mean angle, expressed in radians between 0 and 2*pi, and
kappa is the concentration parameter, which must be greater than or
equal to zero
 If kappa is equal to zero, this distribution reduces
to a uniform random angle over the range 0 to 2*pi.

==============================
random.weibullvariate
(alpha, beta)
Weibull distribution.

alpha is the scale parameter and beta is the shape parameter.

