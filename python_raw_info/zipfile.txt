zipfile.CompleteDirs
(file, mode='r', compression=0, allowZip64=True, compresslevel=None, *, strict_timestamps=True)
A ZipFile subclass that ensures that implied directories
are always included in the namelist.
==============================
zipfile.CompleteDirs.close
(self)
Close the file, and for mode 'w', 'x' and 'a' write the ending
records.
==============================
zipfile.CompleteDirs.comment
The comment text associated with the ZIP file.
==============================
zipfile.CompleteDirs.extract
(self, member, path=None, pwd=None)
Extract a member from the archive to the current working directory, using its full name
`member' may be a filename or a ZipInfo object
You can specify a different directory using `path'.
==============================
zipfile.CompleteDirs.extractall
(self, path=None, members=None, pwd=None)
Extract all members from the archive to the current working directory
`path' specifies a different directory to extract to.
`members' is optional and must be a subset of the list returned
by namelist().
==============================
zipfile.CompleteDirs.getinfo
(self, name)
Return the instance of ZipInfo given 'name'.
==============================
zipfile.CompleteDirs.infolist
(self)
Return a list of class ZipInfo instances for files in the archive.
==============================
zipfile.CompleteDirs.make
(source)
Given a source (filename or zipfile), return an appropriate CompleteDirs subclass.
==============================
zipfile.CompleteDirs.namelist
(self)
Return a list of file names in the archive.
==============================
zipfile.CompleteDirs.open
(self, name, mode='r', pwd=None, *, force_zip64=False)
Return file-like object for 'name'.
name is a string for the file name within the ZIP file, or a ZipInfo object.
mode should be 'r' to read a file already in the ZIP file, or 'w' to write to a file newly added to the archive.
pwd is the password to decrypt files (only used for reading).
==============================
zipfile.CompleteDirs.printdir
(self, file=None)
Print a table of contents for the zip file.
==============================
zipfile.CompleteDirs.read
(self, name, pwd=None)
Return file bytes for name.
==============================
zipfile.CompleteDirs.resolve_dir
(self, name)
If the name represents a directory, return that name as a directory (with the trailing slash).
==============================
zipfile.CompleteDirs.setpassword
(self, pwd)
Set default password for encrypted files.
==============================
zipfile.CompleteDirs.testzip
(self)
Read all the files and check the CRC.
==============================
zipfile.CompleteDirs.write
(self, filename, arcname=None, compress_type=None, compresslevel=None)
Put the bytes from filename into the archive under the name arcname.
==============================
zipfile.CompleteDirs.writestr
(self, zinfo_or_arcname, data, compress_type=None, compresslevel=None)
Write a file into the archive The contents is 'data', which may be either a 'str' or a 'bytes' instance
'zinfo_or_arcname' is either a ZipInfo instance or the name of the file in the archive.
==============================
zipfile.Path
(root, at='')
A pathlib-compatible interface for zip files.
Path accepts the zipfile object itself or a filename
==============================
zipfile.Path.is_dir
(self)
==============================
zipfile.Path.is_file
(self)
==============================
zipfile.Path.iterdir
(self)
==============================
zipfile.Path.joinpath
(self, add)
==============================
zipfile.Path.name
==============================
zipfile.Path.open
==============================
zipfile.Path.parent
==============================
zipfile.Path.read_bytes
(self)
==============================
zipfile.Path.read_text
(self, *args, **kwargs)
==============================
zipfile.PyZipFile
(file, mode='r', compression=0, allowZip64=True, optimize=-1)
Class to create ZIP archives with Python library files and packages.
==============================
zipfile.PyZipFile.close
(self)
Close the file, and for mode 'w', 'x' and 'a' write the ending
records.
==============================
zipfile.PyZipFile.comment
The comment text associated with the ZIP file.
==============================
zipfile.PyZipFile.extract
(self, member, path=None, pwd=None)
Extract a member from the archive to the current working directory, using its full name
`member' may be a filename or a ZipInfo object
You can specify a different directory using `path'.
==============================
zipfile.PyZipFile.extractall
(self, path=None, members=None, pwd=None)
Extract all members from the archive to the current working directory
`path' specifies a different directory to extract to.
`members' is optional and must be a subset of the list returned by namelist().
==============================
zipfile.PyZipFile.fp
None
==============================
zipfile.PyZipFile.getinfo
(self, name)
Return the instance of ZipInfo given 'name'.
==============================
zipfile.PyZipFile.infolist
(self)
Return a list of class ZipInfo instances for files in the archive.
==============================
zipfile.PyZipFile.namelist
(self)
Return a list of file names in the archive.
==============================
zipfile.PyZipFile.open
(self, name, mode='r', pwd=None, *, force_zip64=False)
Return file-like object for 'name'.  
name is a string for the file name within the ZIP file, or a ZipInfo object.
==============================
zipfile.PyZipFile.printdir
(self, file=None)
Print a table of contents for the zip file.
==============================
zipfile.PyZipFile.read
(self, name, pwd=None)
Return file bytes for name.
==============================
zipfile.PyZipFile.setpassword
(self, pwd)
Set default password for encrypted files.
==============================
zipfile.PyZipFile.testzip
(self)
Read all the files and check the CRC.
==============================
zipfile.PyZipFile.write
(self, filename, arcname=None, compress_type=None, compresslevel=None)
==============================
zipfile.PyZipFile.writepy
(self, pathname, basename='', filterfunc=None)
Add all files from "pathname" to the ZIP archive.
If pathname is a package directory, search the directory and all package subdirectories recursively for all *.py and enter the modules into the archive
 If pathname is a plain directory, listdir *.py and enter all modules
 Else, pathname must be a Python *.py file and the module will be put into the archive
 Added modules are always module.pyc.
This method will compile the module.py into module.pyc if necessary.
If filterfunc(pathname) is given, it is called with every argument.  When it is False, the file or directory is skipped.
==============================
zipfile.PyZipFile.writestr
(self, zinfo_or_arcname, data, compress_type=None, compresslevel=None)
==============================
zipfile.ZipExtFile
(fileobj, mode, zipinfo, pwd=None, close_fileobj=False)
File-like object for reading an archive member.
Is returned by ZipFile.open().
==============================
zipfile.ZipExtFile.close
(self)
Flush and close the IO object.
==============================
zipfile.ZipExtFile.closed
==============================
zipfile.ZipExtFile.read
(self, n=-1)
Read and return up to n bytes.
If the argument is omitted, None, or negative, data is read and returned until EOF is reached.
==============================
zipfile.ZipExtFile.readline
(self, limit=-1)
Read and return a line from the stream.
If limit is specified, at most limit bytes will be read.
==============================
zipfile.ZipExtFile.readlines
(self, hint=-1, /)
Return a list of lines from the stream.
hint can be specified to control the number of lines read: no more lines will be read if the total size (in bytes/characters) of all lines so far exceeds hint.
==============================
zipfile.ZipExtFile.write
Write the given buffer to the IO stream.
==============================
zipfile.ZipExtFile.writelines
(self, lines, /)
Write a list of lines to stream.
Line separators are not added, so it is usual for each of the lines provided to have a line separator at the end.
==============================
zipfile.ZipFile
(file, mode='r', compression=0, allowZip64=True, compresslevel=None, *, strict_timestamps=True)
Class with methods to open, read, write, close, list zip files.
z = ZipFile(file, mode="r", compression=ZIP_STORED, allowZip64=True, compresslevel=None)
==============================
zipfile.ZipFile.close
(self)
==============================
zipfile.ZipFile.comment
The comment text associated with the ZIP file.
==============================
zipfile.ZipFile.extract
(self, member, path=None, pwd=None)
==============================
zipfile.ZipFile.extractall
(self, path=None, members=None, pwd=None)
==============================
zipfile.ZipFile.fp
==============================
zipfile.ZipFile.getinfo
(self, name)
==============================
zipfile.ZipFile.infolist
(self)
==============================
zipfile.ZipFile.namelist
(self)
==============================
zipfile.ZipFile.open
(self, name, mode='r', pwd=None, *, force_zip64=False)
==============================
zipfile.ZipFile.printdir
(self, file=None)
==============================
zipfile.ZipFile.read
(self, name, pwd=None)
==============================
zipfile.ZipFile.setpassword
(self, pwd)
==============================
zipfile.ZipFile.testzip
(self)
==============================
zipfile.ZipFile.write
(self, filename, arcname=None, compress_type=None, compresslevel=None)
==============================
zipfile.ZipFile.writestr
(self, zinfo_or_arcname, data, compress_type=None, compresslevel=None)
==============================
zipfile.ZipInfo
(filename='NoName', date_time=(1980, 1, 1, 0, 0, 0))
Class with attributes describing each file in the ZIP archive.
==============================
zipfile.ZipInfo.CRC
==============================
zipfile.ZipInfo.comment
==============================
zipfile.ZipInfo.compress_size
==============================
zipfile.ZipInfo.compress_type
==============================
zipfile.ZipInfo.create_system
==============================
zipfile.ZipInfo.create_version
==============================
zipfile.ZipInfo.date_time
==============================
zipfile.ZipInfo.external_attr
==============================
zipfile.ZipInfo.extra
==============================
zipfile.ZipInfo.extract_version
==============================
zipfile.ZipInfo.file_size
==============================
zipfile.ZipInfo.filename
==============================
zipfile.ZipInfo.flag_bits
==============================
zipfile.ZipInfo.from_file
(filename, arcname=None, *, strict_timestamps=True)
Construct an appropriate ZipInfo for a file on the filesystem.
filename should be the path to a file or directory on the filesystem.
arcname is the name which it will have within the archive (by default, this will be the same as filename, but without a drive letter and with leading path separators removed).
==============================
zipfile.ZipInfo.is_dir
(self)
Return True if this archive member is a directory.
==============================
zipfile.ZipInfo.orig_filename
==============================
zipfile.binascii
Conversion between binary data and ASCII
==============================
zipfile.is_zipfile
(filename)
Quickly see if a file is a ZIP file by checking the magic number.
The filename argument may be a file or file-like object too.
