==============================
getopt.GetoptError
(msg, opt='')
Common base class for all non-exit exceptions.

==============================
getopt.GetoptError.args
None

==============================
getopt.GetoptError.msg
str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object
If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.

==============================
getopt.GetoptError.opt
str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object
If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.

==============================
getopt.GetoptError.with_traceback
Exception.with_traceback(tb) --
set self.__traceback__ to tb and return self.

==============================
getopt.do_longs
(opts, opt, longopts, args)
None

==============================
getopt.do_shorts
(opts, optstring, shortopts, args)
None

==============================
getopt.error
(msg, opt='')
Common base class for all non-exit exceptions.

==============================
getopt.error.args
None

==============================
getopt.error.msg
str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object
If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.

==============================
getopt.error.opt
str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object
If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.

==============================
getopt.error.with_traceback
Exception.with_traceback(tb) --
set self.__traceback__ to tb and return self.

==============================
getopt.getopt
(args, shortopts, longopts=[])
getopt(args, options[, long_options]) -> opts, args

Parses command line options and parameter list
 args is the
argument list to be parsed, without the leading reference to the
running program
 Typically, this means "sys.argv[1:]"
 shortopts
is the string of option letters that the script wants to
recognize, with options that require an argument followed by a
colon (i.e., the same format that Unix getopt() uses)
 If
specified, longopts is a list of strings with the names of the
long options which should be supported
 The leading '--'
characters should not be included in the option name
 Options
which require an argument should be followed by an equal sign
('=').

The return value consists of two elements: the first is a list of
(option, value) pairs; the second is the list of program arguments
left after the option list was stripped (this is a trailing slice
of the first argument)
 Each option-and-value pair returned has
the option as its first element, prefixed with a hyphen (e.g.,
'-x'), and the option argument as its second element, or an empty
string if the option has no argument
 The options occur in the
list in the same order in which they were found, thus allowing
multiple occurrences
 Long and short options may be mixed.

==============================
getopt.gnu_getopt
(args, shortopts, longopts=[])
getopt(args, options[, long_options]) -> opts, args

This function works like getopt(), except that GNU style scanning
mode is used by default
This means that option and non-option
arguments may be intermixed
The getopt() function stops
processing options as soon as a non-option argument is
encountered.

If the first character of the option string is `+', or if the
environment variable POSIXLY_CORRECT is set, then option
processing stops as soon as a non-option argument is encountered.

==============================
getopt.long_has_args
(opt, longopts)
None

==============================
getopt.os
OS routines for NT or Posix depending on what system we're on.

This exports:
  - all functions from posix or nt, e.g
unlink, stat, etc.
  - os.path is either posixpath or ntpath
  - os.name is either 'posix' or 'nt'
  - os.curdir is a string representing the current directory (always '.')
  - os.pardir is a string representing the parent directory (always '..')
  - os.sep is the (or a most common) pathname separator ('/' or '\\')
  - os.extsep is the extension separator (always '.')
  - os.altsep is the alternate pathname separator (None or '/')
  - os.pathsep is the component separator used in $PATH etc
  - os.linesep is the line separator in text files ('\r' or '\n' or '\r\n')
  - os.defpath is the default search path for executables
  - os.devnull is the file path of the null device ('/dev/null', etc.)

Programs that import and use 'os' stand a better chance of being
portable between different platforms
 Of course, they must then
only use functions that are defined by all platforms (e.g., unlink
and opendir), and leave all pathname manipulation to os.path
(e.g., split and join).

==============================
getopt.short_has_arg
(opt, shortopts)
None

