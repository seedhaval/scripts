==============================
secrets.DEFAULT_ENTROPY
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
secrets.SystemRandom
(x=None)
Alternate random number generator using sources provided
by the operating system (such as /dev/urandom on Unix or
CryptGenRandom on Windows).

 Not available on all systems (see os.urandom() for details).

==============================
secrets.SystemRandom.VERSION
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
secrets.SystemRandom.betavariate
(self, alpha, beta)
Beta distribution.

Conditions on the parameters are alpha > 0 and beta > 0.
Returned values range between 0 and 1.

==============================
secrets.SystemRandom.choice
(self, seq)
Choose a random element from a non-empty sequence.

==============================
secrets.SystemRandom.choices
(self, population, weights=None, *, cum_weights=None, k=1)
Return a k sized list of population elements chosen with replacement.

If the relative weights or cumulative weights are not specified,
the selections are made with equal probability.

==============================
secrets.SystemRandom.expovariate
(self, lambd)
Exponential distribution.

lambd is 1.0 divided by the desired mean
 It should be
nonzero
 (The parameter would be called "lambda", but that is
a reserved word in Python.)  Returned values range from 0 to
positive infinity if lambd is positive, and from negative
infinity to 0 if lambd is negative.

==============================
secrets.SystemRandom.gammavariate
(self, alpha, beta)
Gamma distribution
 Not the gamma function!

Conditions on the parameters are alpha > 0 and beta > 0.

The probability distribution function is:

            x ** (alpha - 1) * math.exp(-x / beta)
  pdf(x) =  --------------------------------------
              math.gamma(alpha) * beta ** alpha

==============================
secrets.SystemRandom.gauss
(self, mu, sigma)
Gaussian distribution.

mu is the mean, and sigma is the standard deviation
 This is
slightly faster than the normalvariate() function.

Not thread-safe without a lock around calls.

==============================
secrets.SystemRandom.getrandbits
(self, k)
getrandbits(k) -> x
 Generates an int with k random bits.

==============================
secrets.SystemRandom.getstate
(self, *args, **kwds)
Method should not be called for a system random number generator.

==============================
secrets.SystemRandom.lognormvariate
(self, mu, sigma)
Log normal distribution.

If you take the natural logarithm of this distribution, you'll get a
normal distribution with mean mu and standard deviation sigma.
mu can have any value, and sigma must be greater than zero.

==============================
secrets.SystemRandom.normalvariate
(self, mu, sigma)
Normal distribution.

mu is the mean, and sigma is the standard deviation.

==============================
secrets.SystemRandom.paretovariate
(self, alpha)
Pareto distribution
 alpha is the shape parameter.

==============================
secrets.SystemRandom.randint
(self, a, b)
Return random integer in range [a, b], including both end points.
        

==============================
secrets.SystemRandom.random
(self)
Get the next random number in the range [0.0, 1.0).

==============================
secrets.SystemRandom.randrange
(self, start, stop=None, step=1, _int=<class 'int'>)
Choose a random item from range(start, stop[, step]).

This fixes the problem with randint() which includes the
endpoint; in Python this is usually not what you want.

==============================
secrets.SystemRandom.sample
(self, population, k)
Chooses k unique random elements from a population sequence or set.

Returns a new list containing elements from the population while
leaving the original population unchanged
 The resulting list is
in selection order so that all sub-slices will also be valid random
samples
 This allows raffle winners (the sample) to be partitioned
into grand prize and second place winners (the subslices).

Members of the population need not be hashable or unique
 If the
population contains repeats, then each occurrence is a possible
selection in the sample.

To choose a sample in a range of integers, use range as an argument.
This is especially fast and space efficient for sampling from a
large population:   sample(range(10000000), 60)

==============================
secrets.SystemRandom.seed
(self, *args, **kwds)
Stub method
 Not used for a system random number generator.

==============================
secrets.SystemRandom.setstate
(self, *args, **kwds)
Method should not be called for a system random number generator.

==============================
secrets.SystemRandom.shuffle
(self, x, random=None)
Shuffle list x in place, and return None.

Optional argument random is a 0-argument function returning a
random float in [0.0, 1.0); if it is the default None, the
standard random.random will be used.

==============================
secrets.SystemRandom.triangular
(self, low=0.0, high=1.0, mode=None)
Triangular distribution.

Continuous distribution bounded by given lower and upper limits,
and having a given mode value in-between.

http://en.wikipedia.org/wiki/Triangular_distribution

==============================
secrets.SystemRandom.uniform
(self, a, b)
Get a random number in the range [a, b) or [a, b] depending on rounding.

==============================
secrets.SystemRandom.vonmisesvariate
(self, mu, kappa)
Circular data distribution.

mu is the mean angle, expressed in radians between 0 and 2*pi, and
kappa is the concentration parameter, which must be greater than or
equal to zero
 If kappa is equal to zero, this distribution reduces
to a uniform random angle over the range 0 to 2*pi.

==============================
secrets.SystemRandom.weibullvariate
(self, alpha, beta)
Weibull distribution.

alpha is the scale parameter and beta is the shape parameter.

==============================
secrets.base64
Base16, Base32, Base64 (RFC 3548), Base85 and Ascii85 data encodings

==============================
secrets.binascii
Conversion between binary data and ASCII

==============================
secrets.choice
(seq)
Choose a random element from a non-empty sequence.

==============================
secrets.compare_digest
(a, b, /)
Return 'a == b'.

This function uses an approach designed to prevent
timing analysis, making it appropriate for cryptography.

a and b must both be of the same type: either str (ASCII only),
or any bytes-like object.

Note: If a and b are of different lengths, or if an error occurs,
a timing attack could theoretically reveal information about the
types and lengths of a and b--but not their values.

==============================
secrets.os
OS routines for NT or Posix depending on what system we're on.

This exports:
  - all functions from posix or nt, e.g
unlink, stat, etc.
  - os.path is either posixpath or ntpath
  - os.name is either 'posix' or 'nt'
  - os.curdir is a string representing the current directory (always '.')
  - os.pardir is a string representing the parent directory (always '..')
  - os.sep is the (or a most common) pathname separator ('/' or '\\')
  - os.extsep is the extension separator (always '.')
  - os.altsep is the alternate pathname separator (None or '/')
  - os.pathsep is the component separator used in $PATH etc
  - os.linesep is the line separator in text files ('\r' or '\n' or '\r\n')
  - os.defpath is the default search path for executables
  - os.devnull is the file path of the null device ('/dev/null', etc.)

Programs that import and use 'os' stand a better chance of being
portable between different platforms
 Of course, they must then
only use functions that are defined by all platforms (e.g., unlink
and opendir), and leave all pathname manipulation to os.path
(e.g., split and join).

==============================
secrets.randbelow
(exclusive_upper_bound)
Return a random int in the range [0, n).

==============================
secrets.randbits
(k)
getrandbits(k) -> x
 Generates an int with k random bits.

==============================
secrets.token_bytes
(nbytes=None)
Return a random byte string containing *nbytes* bytes.

If *nbytes* is ``None`` or not supplied, a reasonable
default is used.

>>> token_bytes(16)  #doctest:+SKIP
b'\xebr\x17D*t\xae\xd4\xe3S\xb6\xe2\xebP1\x8b'

==============================
secrets.token_hex
(nbytes=None)
Return a random text string, in hexadecimal.

The string has *nbytes* random bytes, each byte converted to two
hex digits
 If *nbytes* is ``None`` or not supplied, a reasonable
default is used.

>>> token_hex(16)  #doctest:+SKIP
'f9bf78b9a18ce6d46a0cd2b0b86df9da'

==============================
secrets.token_urlsafe
(nbytes=None)
Return a random URL-safe text string, in Base64 encoding.

The string has *nbytes* random bytes
 If *nbytes* is ``None``
or not supplied, a reasonable default is used.

>>> token_urlsafe(16)  #doctest:+SKIP
'Drmhze6EPcv0fN_81Bj-nA'

