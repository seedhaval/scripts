==============================
pathlib.EBADF
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
pathlib.EINVAL
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
pathlib.ELOOP
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
pathlib.ENOENT
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
pathlib.ENOTDIR
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
pathlib.Path
(*args, **kwargs)
PurePath subclass that can make system calls.

Path represents a filesystem path but unlike PurePath, also offers
methods to do system calls on path objects
Depending on your system,
instantiating a Path will return either a PosixPath or a WindowsPath
object
You can also instantiate a PosixPath or WindowsPath directly,
but cannot instantiate a WindowsPath on a POSIX system or vice versa.

==============================
pathlib.Path.absolute
(self)
Return an absolute version of this path
 This function works
even if the path doesn't point to anything.

No normalization is done, i.e
all '.' and '..' will be kept along.
Use resolve() to get the canonical path to a file.

==============================
pathlib.Path.anchor
The concatenation of the drive and root, or ''.

==============================
pathlib.Path.as_posix
(self)
Return the string representation of the path with forward (/)
slashes.

==============================
pathlib.Path.as_uri
(self)
Return the path as a 'file' URI.

==============================
pathlib.Path.chmod
(self, mode)
Change the permissions of the path, like os.chmod().

==============================
pathlib.Path.cwd
()
Return a new path pointing to the current working directory
(as returned by os.getcwd()).

==============================
pathlib.Path.drive
The drive prefix (letter or UNC path), if any.

==============================
pathlib.Path.exists
(self)
Whether this path exists.

==============================
pathlib.Path.expanduser
(self)
Return a new path with expanded ~ and ~user constructs
(as returned by os.path.expanduser)

==============================
pathlib.Path.glob
(self, pattern)
Iterate over this subtree and yield all existing files (of any
kind, including directories) matching the given relative pattern.

==============================
pathlib.Path.group
(self)
Return the group name of the file gid.

==============================
pathlib.Path.home
()
Return a new path pointing to the user's home directory (as
returned by os.path.expanduser('~')).

==============================
pathlib.Path.is_absolute
(self)
True if the path is absolute (has both a root and, if applicable,
a drive).

==============================
pathlib.Path.is_block_device
(self)
Whether this path is a block device.

==============================
pathlib.Path.is_char_device
(self)
Whether this path is a character device.

==============================
pathlib.Path.is_dir
(self)
Whether this path is a directory.

==============================
pathlib.Path.is_fifo
(self)
Whether this path is a FIFO.

==============================
pathlib.Path.is_file
(self)
Whether this path is a regular file (also True for symlinks pointing
to regular files).

==============================
pathlib.Path.is_mount
(self)
Check if this path is a POSIX mount point

==============================
pathlib.Path.is_reserved
(self)
Return True if the path contains one of the special names reserved
by the system, if any.

==============================
pathlib.Path.is_socket
(self)
Whether this path is a socket.

==============================
pathlib.Path.is_symlink
(self)
Whether this path is a symbolic link.

==============================
pathlib.Path.iterdir
(self)
Iterate over the files in this directory
 Does not yield any
result for the special paths '.' and '..'.

==============================
pathlib.Path.joinpath
(self, *args)
Combine this path with one or several arguments, and return a
new path representing either a subpath (if all arguments are relative
paths) or a totally different path (if one of the arguments is
anchored).

==============================
pathlib.Path.lchmod
(self, mode)
Like chmod(), except if the path points to a symlink, the symlink's
permissions are changed, rather than its target's.

==============================
pathlib.Path.link_to
(self, target)
Make the target path a hard link pointing to this path.

Note this function does not make this path a hard link to *target*,
despite the implication of the function and argument names
The order
of arguments (target, link) is the reverse of Path.symlink_to, but
matches that of os.link.

==============================
pathlib.Path.lstat
(self)
Like stat(), except if the path points to a symlink, the symlink's
status information is returned, rather than its target's.

==============================
pathlib.Path.match
(self, path_pattern)
Return True if this path matches the given pattern.

==============================
pathlib.Path.mkdir
(self, mode=511, parents=False, exist_ok=False)
Create a new directory at this given path.

==============================
pathlib.Path.name
The final path component, if any.

==============================
pathlib.Path.open
(self, mode='r', buffering=-1, encoding=None, errors=None, newline=None)
Open the file pointed by this path and return a file object, as
the built-in open() function does.

==============================
pathlib.Path.owner
(self)
Return the login name of the file owner.

==============================
pathlib.Path.parent
The logical parent of the path.

==============================
pathlib.Path.parents
A sequence of this path's logical parents.

==============================
pathlib.Path.parts
An object providing sequence-like access to the
components in the filesystem path.

==============================
pathlib.Path.read_bytes
(self)
Open the file in bytes mode, read it, and close the file.

==============================
pathlib.Path.read_text
(self, encoding=None, errors=None)
Open the file in text mode, read it, and close the file.

==============================
pathlib.Path.relative_to
(self, *other)
Return the relative path to another path identified by the passed
arguments
 If the operation is not possible (because this is not
a subpath of the other path), raise ValueError.

==============================
pathlib.Path.rename
(self, target)
Rename this path to the target path.

The target path may be absolute or relative
Relative paths are
interpreted relative to the current working directory, *not* the
directory of the Path object.

Returns the new Path instance pointing to the target path.

==============================
pathlib.Path.replace
(self, target)
Rename this path to the target path, overwriting if that path exists.

The target path may be absolute or relative
Relative paths are
interpreted relative to the current working directory, *not* the
directory of the Path object.

Returns the new Path instance pointing to the target path.

==============================
pathlib.Path.resolve
(self, strict=False)
Make the path absolute, resolving all symlinks on the way and also
normalizing it (for example turning slashes into backslashes under
Windows).

==============================
pathlib.Path.rglob
(self, pattern)
Recursively yield all existing files (of any kind, including
directories) matching the given relative pattern, anywhere in
this subtree.

==============================
pathlib.Path.rmdir
(self)
Remove this directory
 The directory must be empty.

==============================
pathlib.Path.root
The root of the path, if any.

==============================
pathlib.Path.samefile
(self, other_path)
Return whether other_path is the same or not as this file
(as returned by os.path.samefile()).

==============================
pathlib.Path.stat
(self)
Return the result of the stat() system call on this path, like
os.stat() does.

==============================
pathlib.Path.stem
The final path component, minus its last suffix.

==============================
pathlib.Path.suffix
The final component's last suffix, if any.

This includes the leading period
For example: '.txt'

==============================
pathlib.Path.suffixes
A list of the final component's suffixes, if any.

These include the leading periods
For example: ['.tar', '.gz']

==============================
pathlib.Path.symlink_to
(self, target, target_is_directory=False)
Make this path a symlink pointing to the target path.
Note the order of arguments (link, target) is the reverse of os.symlink.

==============================
pathlib.Path.touch
(self, mode=438, exist_ok=True)
Create this file with the given access mode, if it doesn't exist.

==============================
pathlib.Path.unlink
(self, missing_ok=False)
Remove this file or link.
If the path is a directory, use rmdir() instead.

==============================
pathlib.Path.with_name
(self, name)
Return a new path with the file name changed.

==============================
pathlib.Path.with_suffix
(self, suffix)
Return a new path with the file suffix changed
 If the path
has no suffix, add given suffix
 If the given suffix is an empty
string, remove the suffix from the path.

==============================
pathlib.Path.write_bytes
(self, data)
Open the file in bytes mode, write to it, and close the file.

==============================
pathlib.Path.write_text
(self, data, encoding=None, errors=None)
Open the file in text mode, write to it, and close the file.

==============================
pathlib.PosixPath
(*args, **kwargs)
Path subclass for non-Windows systems.

On a POSIX system, instantiating a Path should return this object.

==============================
pathlib.PosixPath.absolute
(self)
Return an absolute version of this path
 This function works
even if the path doesn't point to anything.

No normalization is done, i.e
all '.' and '..' will be kept along.
Use resolve() to get the canonical path to a file.

==============================
pathlib.PosixPath.anchor
The concatenation of the drive and root, or ''.

==============================
pathlib.PosixPath.as_posix
(self)
Return the string representation of the path with forward (/)
slashes.

==============================
pathlib.PosixPath.as_uri
(self)
Return the path as a 'file' URI.

==============================
pathlib.PosixPath.chmod
(self, mode)
Change the permissions of the path, like os.chmod().

==============================
pathlib.PosixPath.cwd
()
Return a new path pointing to the current working directory
(as returned by os.getcwd()).

==============================
pathlib.PosixPath.drive
The drive prefix (letter or UNC path), if any.

==============================
pathlib.PosixPath.exists
(self)
Whether this path exists.

==============================
pathlib.PosixPath.expanduser
(self)
Return a new path with expanded ~ and ~user constructs
(as returned by os.path.expanduser)

==============================
pathlib.PosixPath.glob
(self, pattern)
Iterate over this subtree and yield all existing files (of any
kind, including directories) matching the given relative pattern.

==============================
pathlib.PosixPath.group
(self)
Return the group name of the file gid.

==============================
pathlib.PosixPath.home
()
Return a new path pointing to the user's home directory (as
returned by os.path.expanduser('~')).

==============================
pathlib.PosixPath.is_absolute
(self)
True if the path is absolute (has both a root and, if applicable,
a drive).

==============================
pathlib.PosixPath.is_block_device
(self)
Whether this path is a block device.

==============================
pathlib.PosixPath.is_char_device
(self)
Whether this path is a character device.

==============================
pathlib.PosixPath.is_dir
(self)
Whether this path is a directory.

==============================
pathlib.PosixPath.is_fifo
(self)
Whether this path is a FIFO.

==============================
pathlib.PosixPath.is_file
(self)
Whether this path is a regular file (also True for symlinks pointing
to regular files).

==============================
pathlib.PosixPath.is_mount
(self)
Check if this path is a POSIX mount point

==============================
pathlib.PosixPath.is_reserved
(self)
Return True if the path contains one of the special names reserved
by the system, if any.

==============================
pathlib.PosixPath.is_socket
(self)
Whether this path is a socket.

==============================
pathlib.PosixPath.is_symlink
(self)
Whether this path is a symbolic link.

==============================
pathlib.PosixPath.iterdir
(self)
Iterate over the files in this directory
 Does not yield any
result for the special paths '.' and '..'.

==============================
pathlib.PosixPath.joinpath
(self, *args)
Combine this path with one or several arguments, and return a
new path representing either a subpath (if all arguments are relative
paths) or a totally different path (if one of the arguments is
anchored).

==============================
pathlib.PosixPath.lchmod
(self, mode)
Like chmod(), except if the path points to a symlink, the symlink's
permissions are changed, rather than its target's.

==============================
pathlib.PosixPath.link_to
(self, target)
Make the target path a hard link pointing to this path.

Note this function does not make this path a hard link to *target*,
despite the implication of the function and argument names
The order
of arguments (target, link) is the reverse of Path.symlink_to, but
matches that of os.link.

==============================
pathlib.PosixPath.lstat
(self)
Like stat(), except if the path points to a symlink, the symlink's
status information is returned, rather than its target's.

==============================
pathlib.PosixPath.match
(self, path_pattern)
Return True if this path matches the given pattern.

==============================
pathlib.PosixPath.mkdir
(self, mode=511, parents=False, exist_ok=False)
Create a new directory at this given path.

==============================
pathlib.PosixPath.name
The final path component, if any.

==============================
pathlib.PosixPath.open
(self, mode='r', buffering=-1, encoding=None, errors=None, newline=None)
Open the file pointed by this path and return a file object, as
the built-in open() function does.

==============================
pathlib.PosixPath.owner
(self)
Return the login name of the file owner.

==============================
pathlib.PosixPath.parent
The logical parent of the path.

==============================
pathlib.PosixPath.parents
A sequence of this path's logical parents.

==============================
pathlib.PosixPath.parts
An object providing sequence-like access to the
components in the filesystem path.

==============================
pathlib.PosixPath.read_bytes
(self)
Open the file in bytes mode, read it, and close the file.

==============================
pathlib.PosixPath.read_text
(self, encoding=None, errors=None)
Open the file in text mode, read it, and close the file.

==============================
pathlib.PosixPath.relative_to
(self, *other)
Return the relative path to another path identified by the passed
arguments
 If the operation is not possible (because this is not
a subpath of the other path), raise ValueError.

==============================
pathlib.PosixPath.rename
(self, target)
Rename this path to the target path.

The target path may be absolute or relative
Relative paths are
interpreted relative to the current working directory, *not* the
directory of the Path object.

Returns the new Path instance pointing to the target path.

==============================
pathlib.PosixPath.replace
(self, target)
Rename this path to the target path, overwriting if that path exists.

The target path may be absolute or relative
Relative paths are
interpreted relative to the current working directory, *not* the
directory of the Path object.

Returns the new Path instance pointing to the target path.

==============================
pathlib.PosixPath.resolve
(self, strict=False)
Make the path absolute, resolving all symlinks on the way and also
normalizing it (for example turning slashes into backslashes under
Windows).

==============================
pathlib.PosixPath.rglob
(self, pattern)
Recursively yield all existing files (of any kind, including
directories) matching the given relative pattern, anywhere in
this subtree.

==============================
pathlib.PosixPath.rmdir
(self)
Remove this directory
 The directory must be empty.

==============================
pathlib.PosixPath.root
The root of the path, if any.

==============================
pathlib.PosixPath.samefile
(self, other_path)
Return whether other_path is the same or not as this file
(as returned by os.path.samefile()).

==============================
pathlib.PosixPath.stat
(self)
Return the result of the stat() system call on this path, like
os.stat() does.

==============================
pathlib.PosixPath.stem
The final path component, minus its last suffix.

==============================
pathlib.PosixPath.suffix
The final component's last suffix, if any.

This includes the leading period
For example: '.txt'

==============================
pathlib.PosixPath.suffixes
A list of the final component's suffixes, if any.

These include the leading periods
For example: ['.tar', '.gz']

==============================
pathlib.PosixPath.symlink_to
(self, target, target_is_directory=False)
Make this path a symlink pointing to the target path.
Note the order of arguments (link, target) is the reverse of os.symlink.

==============================
pathlib.PosixPath.touch
(self, mode=438, exist_ok=True)
Create this file with the given access mode, if it doesn't exist.

==============================
pathlib.PosixPath.unlink
(self, missing_ok=False)
Remove this file or link.
If the path is a directory, use rmdir() instead.

==============================
pathlib.PosixPath.with_name
(self, name)
Return a new path with the file name changed.

==============================
pathlib.PosixPath.with_suffix
(self, suffix)
Return a new path with the file suffix changed
 If the path
has no suffix, add given suffix
 If the given suffix is an empty
string, remove the suffix from the path.

==============================
pathlib.PosixPath.write_bytes
(self, data)
Open the file in bytes mode, write to it, and close the file.

==============================
pathlib.PosixPath.write_text
(self, data, encoding=None, errors=None)
Open the file in text mode, write to it, and close the file.

==============================
pathlib.PurePath
(*args)
Base class for manipulating paths without I/O.

PurePath represents a filesystem path and offers operations which
don't imply any actual filesystem I/O
 Depending on your system,
instantiating a PurePath will return either a PurePosixPath or a
PureWindowsPath object
 You can also instantiate either of these classes
directly, regardless of your system.

==============================
pathlib.PurePath.anchor
The concatenation of the drive and root, or ''.

==============================
pathlib.PurePath.as_posix
(self)
Return the string representation of the path with forward (/)
slashes.

==============================
pathlib.PurePath.as_uri
(self)
Return the path as a 'file' URI.

==============================
pathlib.PurePath.drive
The drive prefix (letter or UNC path), if any.

==============================
pathlib.PurePath.is_absolute
(self)
True if the path is absolute (has both a root and, if applicable,
a drive).

==============================
pathlib.PurePath.is_reserved
(self)
Return True if the path contains one of the special names reserved
by the system, if any.

==============================
pathlib.PurePath.joinpath
(self, *args)
Combine this path with one or several arguments, and return a
new path representing either a subpath (if all arguments are relative
paths) or a totally different path (if one of the arguments is
anchored).

==============================
pathlib.PurePath.match
(self, path_pattern)
Return True if this path matches the given pattern.

==============================
pathlib.PurePath.name
The final path component, if any.

==============================
pathlib.PurePath.parent
The logical parent of the path.

==============================
pathlib.PurePath.parents
A sequence of this path's logical parents.

==============================
pathlib.PurePath.parts
An object providing sequence-like access to the
components in the filesystem path.

==============================
pathlib.PurePath.relative_to
(self, *other)
Return the relative path to another path identified by the passed
arguments
 If the operation is not possible (because this is not
a subpath of the other path), raise ValueError.

==============================
pathlib.PurePath.root
The root of the path, if any.

==============================
pathlib.PurePath.stem
The final path component, minus its last suffix.

==============================
pathlib.PurePath.suffix
The final component's last suffix, if any.

This includes the leading period
For example: '.txt'

==============================
pathlib.PurePath.suffixes
A list of the final component's suffixes, if any.

These include the leading periods
For example: ['.tar', '.gz']

==============================
pathlib.PurePath.with_name
(self, name)
Return a new path with the file name changed.

==============================
pathlib.PurePath.with_suffix
(self, suffix)
Return a new path with the file suffix changed
 If the path
has no suffix, add given suffix
 If the given suffix is an empty
string, remove the suffix from the path.

==============================
pathlib.PurePosixPath
(*args)
PurePath subclass for non-Windows systems.

On a POSIX system, instantiating a PurePath should return this object.
However, you can also instantiate it directly on any system.

==============================
pathlib.PurePosixPath.anchor
The concatenation of the drive and root, or ''.

==============================
pathlib.PurePosixPath.as_posix
(self)
Return the string representation of the path with forward (/)
slashes.

==============================
pathlib.PurePosixPath.as_uri
(self)
Return the path as a 'file' URI.

==============================
pathlib.PurePosixPath.drive
The drive prefix (letter or UNC path), if any.

==============================
pathlib.PurePosixPath.is_absolute
(self)
True if the path is absolute (has both a root and, if applicable,
a drive).

==============================
pathlib.PurePosixPath.is_reserved
(self)
Return True if the path contains one of the special names reserved
by the system, if any.

==============================
pathlib.PurePosixPath.joinpath
(self, *args)
Combine this path with one or several arguments, and return a
new path representing either a subpath (if all arguments are relative
paths) or a totally different path (if one of the arguments is
anchored).

==============================
pathlib.PurePosixPath.match
(self, path_pattern)
Return True if this path matches the given pattern.

==============================
pathlib.PurePosixPath.name
The final path component, if any.

==============================
pathlib.PurePosixPath.parent
The logical parent of the path.

==============================
pathlib.PurePosixPath.parents
A sequence of this path's logical parents.

==============================
pathlib.PurePosixPath.parts
An object providing sequence-like access to the
components in the filesystem path.

==============================
pathlib.PurePosixPath.relative_to
(self, *other)
Return the relative path to another path identified by the passed
arguments
 If the operation is not possible (because this is not
a subpath of the other path), raise ValueError.

==============================
pathlib.PurePosixPath.root
The root of the path, if any.

==============================
pathlib.PurePosixPath.stem
The final path component, minus its last suffix.

==============================
pathlib.PurePosixPath.suffix
The final component's last suffix, if any.

This includes the leading period
For example: '.txt'

==============================
pathlib.PurePosixPath.suffixes
A list of the final component's suffixes, if any.

These include the leading periods
For example: ['.tar', '.gz']

==============================
pathlib.PurePosixPath.with_name
(self, name)
Return a new path with the file name changed.

==============================
pathlib.PurePosixPath.with_suffix
(self, suffix)
Return a new path with the file suffix changed
 If the path
has no suffix, add given suffix
 If the given suffix is an empty
string, remove the suffix from the path.

==============================
pathlib.PureWindowsPath
(*args)
PurePath subclass for Windows systems.

On a Windows system, instantiating a PurePath should return this object.
However, you can also instantiate it directly on any system.

==============================
pathlib.PureWindowsPath.anchor
The concatenation of the drive and root, or ''.

==============================
pathlib.PureWindowsPath.as_posix
(self)
Return the string representation of the path with forward (/)
slashes.

==============================
pathlib.PureWindowsPath.as_uri
(self)
Return the path as a 'file' URI.

==============================
pathlib.PureWindowsPath.drive
The drive prefix (letter or UNC path), if any.

==============================
pathlib.PureWindowsPath.is_absolute
(self)
True if the path is absolute (has both a root and, if applicable,
a drive).

==============================
pathlib.PureWindowsPath.is_reserved
(self)
Return True if the path contains one of the special names reserved
by the system, if any.

==============================
pathlib.PureWindowsPath.joinpath
(self, *args)
Combine this path with one or several arguments, and return a
new path representing either a subpath (if all arguments are relative
paths) or a totally different path (if one of the arguments is
anchored).

==============================
pathlib.PureWindowsPath.match
(self, path_pattern)
Return True if this path matches the given pattern.

==============================
pathlib.PureWindowsPath.name
The final path component, if any.

==============================
pathlib.PureWindowsPath.parent
The logical parent of the path.

==============================
pathlib.PureWindowsPath.parents
A sequence of this path's logical parents.

==============================
pathlib.PureWindowsPath.parts
An object providing sequence-like access to the
components in the filesystem path.

==============================
pathlib.PureWindowsPath.relative_to
(self, *other)
Return the relative path to another path identified by the passed
arguments
 If the operation is not possible (because this is not
a subpath of the other path), raise ValueError.

==============================
pathlib.PureWindowsPath.root
The root of the path, if any.

==============================
pathlib.PureWindowsPath.stem
The final path component, minus its last suffix.

==============================
pathlib.PureWindowsPath.suffix
The final component's last suffix, if any.

This includes the leading period
For example: '.txt'

==============================
pathlib.PureWindowsPath.suffixes
A list of the final component's suffixes, if any.

These include the leading periods
For example: ['.tar', '.gz']

==============================
pathlib.PureWindowsPath.with_name
(self, name)
Return a new path with the file name changed.

==============================
pathlib.PureWindowsPath.with_suffix
(self, suffix)
Return a new path with the file suffix changed
 If the path
has no suffix, add given suffix
 If the given suffix is an empty
string, remove the suffix from the path.

==============================
pathlib.S_ISBLK
S_ISBLK(mode) -> bool

Return True if mode is from a block special device file.

==============================
pathlib.S_ISCHR
S_ISCHR(mode) -> bool

Return True if mode is from a character special device file.

==============================
pathlib.S_ISDIR
S_ISDIR(mode) -> bool

Return True if mode is from a directory.

==============================
pathlib.S_ISFIFO
S_ISFIFO(mode) -> bool

Return True if mode is from a FIFO (named pipe).

==============================
pathlib.S_ISLNK
S_ISLNK(mode) -> bool

Return True if mode is from a symbolic link.

==============================
pathlib.S_ISREG
S_ISREG(mode) -> bool

Return True if mode is from a regular file.

==============================
pathlib.S_ISSOCK
S_ISSOCK(mode) -> bool

Return True if mode is from a socket.

==============================
pathlib.Sequence
()
All the operations on a read-only sequence.

Concrete subclasses must override __new__ or __init__,
__getitem__, and __len__.

==============================
pathlib.Sequence.count
(self, value)
S.count(value) -> integer -- return number of occurrences of value

==============================
pathlib.Sequence.index
(self, value, start=0, stop=None)
S.index(value, [start, [stop]]) -> integer -- return first index of value.
Raises ValueError if the value is not present.

Supporting start and stop arguments is optional, but
recommended.

==============================
pathlib.WindowsPath
(*args, **kwargs)
Path subclass for Windows systems.

On a Windows system, instantiating a Path should return this object.

==============================
pathlib.WindowsPath.absolute
(self)
Return an absolute version of this path
 This function works
even if the path doesn't point to anything.

No normalization is done, i.e
all '.' and '..' will be kept along.
Use resolve() to get the canonical path to a file.

==============================
pathlib.WindowsPath.anchor
The concatenation of the drive and root, or ''.

==============================
pathlib.WindowsPath.as_posix
(self)
Return the string representation of the path with forward (/)
slashes.

==============================
pathlib.WindowsPath.as_uri
(self)
Return the path as a 'file' URI.

==============================
pathlib.WindowsPath.chmod
(self, mode)
Change the permissions of the path, like os.chmod().

==============================
pathlib.WindowsPath.cwd
()
Return a new path pointing to the current working directory
(as returned by os.getcwd()).

==============================
pathlib.WindowsPath.drive
The drive prefix (letter or UNC path), if any.

==============================
pathlib.WindowsPath.exists
(self)
Whether this path exists.

==============================
pathlib.WindowsPath.expanduser
(self)
Return a new path with expanded ~ and ~user constructs
(as returned by os.path.expanduser)

==============================
pathlib.WindowsPath.glob
(self, pattern)
Iterate over this subtree and yield all existing files (of any
kind, including directories) matching the given relative pattern.

==============================
pathlib.WindowsPath.group
(self)
Return the group name of the file gid.

==============================
pathlib.WindowsPath.home
()
Return a new path pointing to the user's home directory (as
returned by os.path.expanduser('~')).

==============================
pathlib.WindowsPath.is_absolute
(self)
True if the path is absolute (has both a root and, if applicable,
a drive).

==============================
pathlib.WindowsPath.is_block_device
(self)
Whether this path is a block device.

==============================
pathlib.WindowsPath.is_char_device
(self)
Whether this path is a character device.

==============================
pathlib.WindowsPath.is_dir
(self)
Whether this path is a directory.

==============================
pathlib.WindowsPath.is_fifo
(self)
Whether this path is a FIFO.

==============================
pathlib.WindowsPath.is_file
(self)
Whether this path is a regular file (also True for symlinks pointing
to regular files).

==============================
pathlib.WindowsPath.is_mount
(self)
Check if this path is a POSIX mount point

==============================
pathlib.WindowsPath.is_reserved
(self)
Return True if the path contains one of the special names reserved
by the system, if any.

==============================
pathlib.WindowsPath.is_socket
(self)
Whether this path is a socket.

==============================
pathlib.WindowsPath.is_symlink
(self)
Whether this path is a symbolic link.

==============================
pathlib.WindowsPath.iterdir
(self)
Iterate over the files in this directory
 Does not yield any
result for the special paths '.' and '..'.

==============================
pathlib.WindowsPath.joinpath
(self, *args)
Combine this path with one or several arguments, and return a
new path representing either a subpath (if all arguments are relative
paths) or a totally different path (if one of the arguments is
anchored).

==============================
pathlib.WindowsPath.lchmod
(self, mode)
Like chmod(), except if the path points to a symlink, the symlink's
permissions are changed, rather than its target's.

==============================
pathlib.WindowsPath.link_to
(self, target)
Make the target path a hard link pointing to this path.

Note this function does not make this path a hard link to *target*,
despite the implication of the function and argument names
The order
of arguments (target, link) is the reverse of Path.symlink_to, but
matches that of os.link.

==============================
pathlib.WindowsPath.lstat
(self)
Like stat(), except if the path points to a symlink, the symlink's
status information is returned, rather than its target's.

==============================
pathlib.WindowsPath.match
(self, path_pattern)
Return True if this path matches the given pattern.

==============================
pathlib.WindowsPath.mkdir
(self, mode=511, parents=False, exist_ok=False)
Create a new directory at this given path.

==============================
pathlib.WindowsPath.name
The final path component, if any.

==============================
pathlib.WindowsPath.open
(self, mode='r', buffering=-1, encoding=None, errors=None, newline=None)
Open the file pointed by this path and return a file object, as
the built-in open() function does.

==============================
pathlib.WindowsPath.owner
(self)
Return the login name of the file owner.

==============================
pathlib.WindowsPath.parent
The logical parent of the path.

==============================
pathlib.WindowsPath.parents
A sequence of this path's logical parents.

==============================
pathlib.WindowsPath.parts
An object providing sequence-like access to the
components in the filesystem path.

==============================
pathlib.WindowsPath.read_bytes
(self)
Open the file in bytes mode, read it, and close the file.

==============================
pathlib.WindowsPath.read_text
(self, encoding=None, errors=None)
Open the file in text mode, read it, and close the file.

==============================
pathlib.WindowsPath.relative_to
(self, *other)
Return the relative path to another path identified by the passed
arguments
 If the operation is not possible (because this is not
a subpath of the other path), raise ValueError.

==============================
pathlib.WindowsPath.rename
(self, target)
Rename this path to the target path.

The target path may be absolute or relative
Relative paths are
interpreted relative to the current working directory, *not* the
directory of the Path object.

Returns the new Path instance pointing to the target path.

==============================
pathlib.WindowsPath.replace
(self, target)
Rename this path to the target path, overwriting if that path exists.

The target path may be absolute or relative
Relative paths are
interpreted relative to the current working directory, *not* the
directory of the Path object.

Returns the new Path instance pointing to the target path.

==============================
pathlib.WindowsPath.resolve
(self, strict=False)
Make the path absolute, resolving all symlinks on the way and also
normalizing it (for example turning slashes into backslashes under
Windows).

==============================
pathlib.WindowsPath.rglob
(self, pattern)
Recursively yield all existing files (of any kind, including
directories) matching the given relative pattern, anywhere in
this subtree.

==============================
pathlib.WindowsPath.rmdir
(self)
Remove this directory
 The directory must be empty.

==============================
pathlib.WindowsPath.root
The root of the path, if any.

==============================
pathlib.WindowsPath.samefile
(self, other_path)
Return whether other_path is the same or not as this file
(as returned by os.path.samefile()).

==============================
pathlib.WindowsPath.stat
(self)
Return the result of the stat() system call on this path, like
os.stat() does.

==============================
pathlib.WindowsPath.stem
The final path component, minus its last suffix.

==============================
pathlib.WindowsPath.suffix
The final component's last suffix, if any.

This includes the leading period
For example: '.txt'

==============================
pathlib.WindowsPath.suffixes
A list of the final component's suffixes, if any.

These include the leading periods
For example: ['.tar', '.gz']

==============================
pathlib.WindowsPath.symlink_to
(self, target, target_is_directory=False)
Make this path a symlink pointing to the target path.
Note the order of arguments (link, target) is the reverse of os.symlink.

==============================
pathlib.WindowsPath.touch
(self, mode=438, exist_ok=True)
Create this file with the given access mode, if it doesn't exist.

==============================
pathlib.WindowsPath.unlink
(self, missing_ok=False)
Remove this file or link.
If the path is a directory, use rmdir() instead.

==============================
pathlib.WindowsPath.with_name
(self, name)
Return a new path with the file name changed.

==============================
pathlib.WindowsPath.with_suffix
(self, suffix)
Return a new path with the file suffix changed
 If the path
has no suffix, add given suffix
 If the given suffix is an empty
string, remove the suffix from the path.

==============================
pathlib.WindowsPath.write_bytes
(self, data)
Open the file in bytes mode, write to it, and close the file.

==============================
pathlib.WindowsPath.write_text
(self, data, encoding=None, errors=None)
Open the file in text mode, write to it, and close the file.

==============================
pathlib.attrgetter
attrgetter(attr, ...) --> attrgetter object

Return a callable object that fetches the given attribute(s) from its operand.
After f = attrgetter('name'), the call f(r) returns r.name.
After g = attrgetter('name', 'date'), the call g(r) returns (r.name, r.date).
After h = attrgetter('name.first', 'name.last'), the call h(r) returns
(r.name.first, r.name.last).

==============================
pathlib.fnmatch
Filename matching with shell patterns.

fnmatch(FILENAME, PATTERN) matches according to the local convention.
fnmatchcase(FILENAME, PATTERN) always takes case in account.

The functions operate by translating the pattern into a regular
expression
 They cache the compiled regular expressions for speed.

The function translate(PATTERN) returns a regular expression
corresponding to PATTERN
 (It does not compile it.)

==============================
pathlib.functools
functools.py - Tools for working with functions and callable objects

==============================
pathlib.io
The io module provides the Python interfaces to stream handling
The
builtin open function is defined in this module.

At the top of the I/O hierarchy is the abstract base class IOBase
It
defines the basic interface to a stream
Note, however, that there is no
separation between reading and writing to streams; implementations are
allowed to raise an OSError if they do not support a given operation.

Extending IOBase is RawIOBase which deals simply with the reading and
writing of raw bytes to a stream
FileIO subclasses RawIOBase to provide
an interface to OS files.

BufferedIOBase deals with buffering on a raw byte stream (RawIOBase)
Its
subclasses, BufferedWriter, BufferedReader, and BufferedRWPair buffer
streams that are readable, writable, and both respectively.
BufferedRandom provides a buffered interface to random access
streams
BytesIO is a simple stream of in-memory bytes.

Another IOBase subclass, TextIOBase, deals with the encoding and decoding
of streams into text
TextIOWrapper, which extends it, is a buffered text
interface to a buffered raw stream (`BufferedIOBase`)
Finally, StringIO
is an in-memory stream for text.

Argument names are not part of the specification, and only the arguments
of open() are intended to be used as keyword arguments.

data:

DEFAULT_BUFFER_SIZE

   An int containing the default buffer size used by the module's buffered
   I/O classes
open() uses the file's blksize (as obtained by os.stat) if
   possible.

==============================
pathlib.nt
None

==============================
pathlib.ntpath
Common pathname manipulations, WindowsNT/95 version.

Instead of importing this module directly, import os and refer to this
module as os.path.

==============================
pathlib.os
OS routines for NT or Posix depending on what system we're on.

This exports:
  - all functions from posix or nt, e.g
unlink, stat, etc.
  - os.path is either posixpath or ntpath
  - os.name is either 'posix' or 'nt'
  - os.curdir is a string representing the current directory (always '.')
  - os.pardir is a string representing the parent directory (always '..')
  - os.sep is the (or a most common) pathname separator ('/' or '\\')
  - os.extsep is the extension separator (always '.')
  - os.altsep is the alternate pathname separator (None or '/')
  - os.pathsep is the component separator used in $PATH etc
  - os.linesep is the line separator in text files ('\r' or '\n' or '\r\n')
  - os.defpath is the default search path for executables
  - os.devnull is the file path of the null device ('/dev/null', etc.)

Programs that import and use 'os' stand a better chance of being
portable between different platforms
 Of course, they must then
only use functions that are defined by all platforms (e.g., unlink
and opendir), and leave all pathname manipulation to os.path
(e.g., split and join).

==============================
pathlib.posixpath
Common operations on Posix pathnames.

Instead of importing this module directly, import os and refer to
this module as os.path
 The "os.path" name is an alias for this
module on Posix systems; on other systems (e.g
Windows),
os.path provides the same operations in a manner specific to that
platform, and is an alias to another module (e.g
ntpath).

Some of this can actually be useful on non-Posix systems too, e.g.
for manipulation of the pathname component of URLs.

==============================
pathlib.re
Support for regular expressions (RE).

This module provides regular expression matching operations similar to
those found in Perl
 It supports both 8-bit and Unicode strings; both
the pattern and the strings being processed can contain null bytes and
characters outside the US ASCII range.

Regular expressions can contain both special and ordinary characters.
Most ordinary characters, like "A", "a", or "0", are the simplest
regular expressions; they simply match themselves
 You can
concatenate ordinary characters, so last matches the string 'last'.

The special characters are:
    "."      Matches any character except a newline.
    "^"      Matches the start of the string.
    "$"      Matches the end of the string or just before the newline at
             the end of the string.
    "*"      Matches 0 or more (greedy) repetitions of the preceding RE.
             Greedy means that it will match as many repetitions as possible.
    "+"      Matches 1 or more (greedy) repetitions of the preceding RE.
    "?"      Matches 0 or 1 (greedy) of the preceding RE.
    *?,+?,?? Non-greedy versions of the previous three special characters.
    {m,n}    Matches from m to n repetitions of the preceding RE.
    {m,n}?   Non-greedy version of the above.
    "\\"     Either escapes special characters or signals a special sequence.
    []       Indicates a set of characters.
             A "^" as the first character indicates a complementing set.
    "|"      A|B, creates an RE that will match either A or B.
    (...)    Matches the RE inside the parentheses.
             The contents can be retrieved or matched later in the string.
    (?aiLmsux) The letters set the corresponding flags defined below.
    (?:...)  Non-grouping version of regular parentheses.
    (?P<name>...) The substring matched by the group is accessible by name.
    (?P=name)     Matches the text matched earlier by the group named name.
    (?#...)  A comment; ignored.
    (?=...)  Matches if ..
matches next, but doesn't consume the string.
    (?!...)  Matches if ..
doesn't match next.
    (?<=...) Matches if preceded by ..
(must be fixed length).
    (?<!...) Matches if not preceded by ..
(must be fixed length).
    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,
                       the (optional) no pattern otherwise.

The special sequences consist of "\\" and a character from the list
below
 If the ordinary character is not on the list, then the
resulting RE will match the second character.
    \number  Matches the contents of the group of the same number.
    \A       Matches only at the start of the string.
    \Z       Matches only at the end of the string.
    \b       Matches the empty string, but only at the start or end of a word.
    \B       Matches the empty string, but not at the start or end of a word.
    \d       Matches any decimal digit; equivalent to the set [0-9] in
             bytes patterns or string patterns with the ASCII flag.
             In string patterns without the ASCII flag, it will match the whole
             range of Unicode digits.
    \D       Matches any non-digit character; equivalent to [^\d].
    \s       Matches any whitespace character; equivalent to [ \t\n\r\f\v] in
             bytes patterns or string patterns with the ASCII flag.
             In string patterns without the ASCII flag, it will match the whole
             range of Unicode whitespace characters.
    \S       Matches any non-whitespace character; equivalent to [^\s].
    \w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_]
             in bytes patterns or string patterns with the ASCII flag.
             In string patterns without the ASCII flag, it will match the
             range of Unicode alphanumeric characters (letters plus digits
             plus underscore).
             With LOCALE, it will match the set [0-9_] plus characters defined
             as letters for the current locale.
    \W       Matches the complement of \w.
    \\       Matches a literal backslash.

This module exports the following functions:
    match     Match a regular expression pattern to the beginning of a string.
    fullmatch Match a regular expression pattern to all of a string.
    search    Search a string for the presence of a pattern.
    sub       Substitute occurrences of a pattern found in a string.
    subn      Same as sub, but also return the number of substitutions made.
    split     Split a string by the occurrences of a pattern.
    findall   Find all occurrences of a pattern in a string.
    finditer  Return an iterator yielding a Match object for each match.
    compile   Compile a pattern into a Pattern object.
    purge     Clear the regular expression cache.
    escape    Backslash all non-alphanumerics in a string.

Each function other than purge and escape can take an optional 'flags' argument
consisting of one or more of the following module constants, joined by "|".
A, L, and U are mutually exclusive.
    A  ASCII       For string patterns, make \w, \W, \b, \B, \d, \D
                   match the corresponding ASCII character categories
                   (rather than the whole Unicode categories, which is the
                   default).
                   For bytes patterns, this flag is the only available
                   behaviour and needn't be specified.
    I  IGNORECASE  Perform case-insensitive matching.
    L  LOCALE      Make \w, \W, \b, \B, dependent on the current locale.
    M  MULTILINE   "^" matches the beginning of lines (after a newline)
                   as well as the string.
                   "$" matches the end of lines (before a newline) as well
                   as the end of the string.
    S  DOTALL      "." matches any character at all, including the newline.
    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.
    U  UNICODE     For compatibility only
Ignored for string patterns (it
                   is the default), and forbidden for bytes patterns.

This module also defines an exception 'error'.

==============================
pathlib.supports_symlinks
bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.

==============================
pathlib.sys
This module provides access to some objects used or maintained by the
interpreter and to functions that interact strongly with the interpreter.

Dynamic objects:

argv -- command line arguments; argv[0] is the script pathname if known
path -- module search path; path[0] is the script directory, else ''
modules -- dictionary of loaded modules

displayhook -- called to show results in an interactive session
excepthook -- called to handle any uncaught exception other than SystemExit
  To customize printing in an interactive session or to install a custom
  top-level exception handler, assign other functions to replace these.

stdin -- standard input file object; used by input()
stdout -- standard output file object; used by print()
stderr -- standard error object; used for error messages
  By assigning other file objects (or objects that behave like files)
  to these, it is possible to redirect all of the interpreter's I/O.

last_type -- type of last uncaught exception
last_value -- value of last uncaught exception
last_traceback -- traceback of last uncaught exception
  These three are only available in an interactive session after a
  traceback has been printed.

Static objects:

builtin_module_names -- tuple of module names built into this interpreter
copyright -- copyright notice pertaining to this interpreter
exec_prefix -- prefix used to find the machine-specific Python library
executable -- absolute path of the executable binary of the Python interpreter
float_info -- a named tuple with information about the float implementation.
float_repr_style -- string indicating the style of repr() output for floats
hash_info -- a named tuple with information about the hash algorithm.
hexversion -- version information encoded as a single integer
implementation -- Python implementation information.
int_info -- a named tuple with information about the int implementation.
maxsize -- the largest supported length of containers.
maxunicode -- the value of the largest Unicode code point
platform -- platform identifier
prefix -- prefix used to find the Python library
thread_info -- a named tuple with information about the thread implementation.
version -- the version of this interpreter as a string
version_info -- version information as a named tuple
__stdin__ -- the original stdin; don't touch!
__stdout__ -- the original stdout; don't touch!
__stderr__ -- the original stderr; don't touch!
__displayhook__ -- the original displayhook; don't touch!
__excepthook__ -- the original excepthook; don't touch!

Functions:

displayhook() -- print an object to the screen, and save it in builtins._
excepthook() -- print an exception and its traceback to sys.stderr
exc_info() -- return thread-safe information about the current exception
exit() -- exit the interpreter by raising SystemExit
getdlopenflags() -- returns flags to be used for dlopen() calls
getprofile() -- get the global profiling function
getrefcount() -- return the reference count for an object (plus one :-)
getrecursionlimit() -- return the max recursion depth for the interpreter
getsizeof() -- return the size of an object in bytes
gettrace() -- get the global debug tracing function
setcheckinterval() -- control how often the interpreter checks for events
setdlopenflags() -- set the flags to be used for dlopen() calls
setprofile() -- set the global profiling function
setrecursionlimit() -- set the max recursion depth for the interpreter
settrace() -- set the global debug tracing function

==============================
pathlib.urlquote_from_bytes
(bs, safe='/')
Like quote(), but accepts a bytes object rather than a str, and does
not perform string-to-bytes encoding
 It always returns an ASCII string.
quote_from_bytes(b'abc def?') -> 'abc%20def%3f'

