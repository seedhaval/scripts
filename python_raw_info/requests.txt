==============================
requests.ConnectTimeout
(*args, **kwargs)
The request timed out while trying to connect to the remote server.

Requests that produced this error are safe to retry.

==============================
requests.ConnectTimeout.args
None

==============================
requests.ConnectTimeout.characters_written
None

==============================
requests.ConnectTimeout.errno
POSIX exception code

==============================
requests.ConnectTimeout.filename
exception filename

==============================
requests.ConnectTimeout.filename2
second exception filename

==============================
requests.ConnectTimeout.strerror
exception strerror

==============================
requests.ConnectTimeout.with_traceback
Exception.with_traceback(tb) --
set self.__traceback__ to tb and return self.

==============================
requests.ConnectionError
(*args, **kwargs)
A Connection error occurred.

==============================
requests.ConnectionError.args
None

==============================
requests.ConnectionError.characters_written
None

==============================
requests.ConnectionError.errno
POSIX exception code

==============================
requests.ConnectionError.filename
exception filename

==============================
requests.ConnectionError.filename2
second exception filename

==============================
requests.ConnectionError.strerror
exception strerror

==============================
requests.ConnectionError.with_traceback
Exception.with_traceback(tb) --
set self.__traceback__ to tb and return self.

==============================
requests.DependencyWarning
Warned when an attempt is made to import a module with missing optional
dependencies.

==============================
requests.DependencyWarning.args
None

==============================
requests.DependencyWarning.with_traceback
Exception.with_traceback(tb) --
set self.__traceback__ to tb and return self.

==============================
requests.FileModeWarning
A file was opened in text mode, but Requests determined its binary length.

==============================
requests.FileModeWarning.args
None

==============================
requests.FileModeWarning.with_traceback
Exception.with_traceback(tb) --
set self.__traceback__ to tb and return self.

==============================
requests.HTTPError
(*args, **kwargs)
An HTTP error occurred.

==============================
requests.HTTPError.args
None

==============================
requests.HTTPError.characters_written
None

==============================
requests.HTTPError.errno
POSIX exception code

==============================
requests.HTTPError.filename
exception filename

==============================
requests.HTTPError.filename2
second exception filename

==============================
requests.HTTPError.strerror
exception strerror

==============================
requests.HTTPError.with_traceback
Exception.with_traceback(tb) --
set self.__traceback__ to tb and return self.

==============================
requests.NullHandler
(level=0)
This handler does nothing
It's intended to be used to avoid the
"No handlers could be found for logger XXX" one-off warning
This is
important for library code, which may contain code to log events
If a user
of the library does not configure logging, the one-off warning might be
produced; to avoid this, the library developer simply needs to instantiate
a NullHandler and add it to the top-level logger of the library module or
package.

==============================
requests.NullHandler.acquire
(self)
Acquire the I/O thread lock.

==============================
requests.NullHandler.addFilter
(self, filter)
Add the specified filter to this handler.

==============================
requests.NullHandler.close
(self)
Tidy up any resources used by the handler.

This version removes the handler from an internal map of handlers,
_handlers, which is used for handler lookup by name
Subclasses
should ensure that this gets called from overridden close()
methods.

==============================
requests.NullHandler.createLock
(self)
Acquire a thread lock for serializing access to the underlying I/O.

==============================
requests.NullHandler.emit
(self, record)
Stub.

==============================
requests.NullHandler.filter
(self, record)
Determine if a record is loggable by consulting all the filters.

The default is to allow the record to be logged; any filter can veto
this and the record is then dropped
Returns a zero value if a record
is to be dropped, else non-zero.

.
versionchanged:: 3.2

   Allow filters to be just callables.

==============================
requests.NullHandler.flush
(self)
Ensure all logging output has been flushed.

This version does nothing and is intended to be implemented by
subclasses.

==============================
requests.NullHandler.format
(self, record)
Format the specified record.

If a formatter is set, use it
Otherwise, use the default formatter
for the module.

==============================
requests.NullHandler.get_name
(self)
None

==============================
requests.NullHandler.handle
(self, record)
Stub.

==============================
requests.NullHandler.handleError
(self, record)
Handle errors which occur during an emit() call.

This method should be called from handlers when an exception is
encountered during an emit() call
If raiseExceptions is false,
exceptions get silently ignored
This is what is mostly wanted
for a logging system - most users will not care about errors in
the logging system, they are more interested in application errors.
You could, however, replace this with a custom handler if you wish.
The record which was being processed is passed in to this method.

==============================
requests.NullHandler.name
None

==============================
requests.NullHandler.release
(self)
Release the I/O thread lock.

==============================
requests.NullHandler.removeFilter
(self, filter)
Remove the specified filter from this handler.

==============================
requests.NullHandler.setFormatter
(self, fmt)
Set the formatter for this handler.

==============================
requests.NullHandler.setLevel
(self, level)
Set the logging level of this handler
 level must be an int or a str.

==============================
requests.NullHandler.set_name
(self, name)
None

==============================
requests.PreparedRequest
()
The fully mutable :class:`PreparedRequest <PreparedRequest>` object,
containing the exact bytes that will be sent to the server.

Generated from either a :class:`Request <Request>` object or manually.

Usage::

  >>> import requests
  >>> req = requests.Request('GET', 'https://httpbin.org/get')
  >>> r = req.prepare()
  <PreparedRequest [GET]>

  >>> s = requests.Session()
  >>> s.send(r)
  <Response [200]>

==============================
requests.PreparedRequest.copy
(self)
None

==============================
requests.PreparedRequest.deregister_hook
(self, event, hook)
Deregister a previously registered hook.
Returns True if the hook existed, False if not.

==============================
requests.PreparedRequest.path_url
Build the path URL to use.

==============================
requests.PreparedRequest.prepare
(self, method=None, url=None, headers=None, files=None, data=None, params=None, auth=None, cookies=None, hooks=None, json=None)
Prepares the entire request with the given parameters.

==============================
requests.PreparedRequest.prepare_auth
(self, auth, url='')
Prepares the given HTTP auth data.

==============================
requests.PreparedRequest.prepare_body
(self, data, files, json=None)
Prepares the given HTTP body data.

==============================
requests.PreparedRequest.prepare_content_length
(self, body)
Prepare Content-Length header based on request method and body

==============================
requests.PreparedRequest.prepare_cookies
(self, cookies)
Prepares the given HTTP cookie data.

This function eventually generates a ``Cookie`` header from the
given cookies using cookielib
Due to cookielib's design, the header
will not be regenerated if it already exists, meaning this function
can only be called once for the life of the
:class:`PreparedRequest <PreparedRequest>` object
Any subsequent calls
to ``prepare_cookies`` will have no actual effect, unless the "Cookie"
header is removed beforehand.

==============================
requests.PreparedRequest.prepare_headers
(self, headers)
Prepares the given HTTP headers.

==============================
requests.PreparedRequest.prepare_hooks
(self, hooks)
Prepares the given hooks.

==============================
requests.PreparedRequest.prepare_method
(self, method)
Prepares the given HTTP method.

==============================
requests.PreparedRequest.prepare_url
(self, url, params)
Prepares the given HTTP URL.

==============================
requests.PreparedRequest.register_hook
(self, event, hook)
Properly register a hook.

==============================
requests.ReadTimeout
(*args, **kwargs)
The server did not send any data in the allotted amount of time.

==============================
requests.ReadTimeout.args
None

==============================
requests.ReadTimeout.characters_written
None

==============================
requests.ReadTimeout.errno
POSIX exception code

==============================
requests.ReadTimeout.filename
exception filename

==============================
requests.ReadTimeout.filename2
second exception filename

==============================
requests.ReadTimeout.strerror
exception strerror

==============================
requests.ReadTimeout.with_traceback
Exception.with_traceback(tb) --
set self.__traceback__ to tb and return self.

==============================
requests.Request
(method=None, url=None, headers=None, files=None, data=None, params=None, auth=None, cookies=None, hooks=None, json=None)
A user-created :class:`Request <Request>` object.

Used to prepare a :class:`PreparedRequest <PreparedRequest>`, which is sent to the server.

:param method: HTTP method to use.
:param url: URL to send.
:param headers: dictionary of headers to send.
:param files: dictionary of {filename: fileobject} files to multipart upload.
:param data: the body to attach to the request
If a dictionary or
    list of tuples ``[(key, value)]`` is provided, form-encoding will
    take place.
:param json: json for the body to attach to the request (if files or data is not specified).
:param params: URL parameters to append to the URL
If a dictionary or
    list of tuples ``[(key, value)]`` is provided, form-encoding will
    take place.
:param auth: Auth handler or (user, pass) tuple.
:param cookies: dictionary or CookieJar of cookies to attach to this request.
:param hooks: dictionary of callback hooks, for internal usage.

Usage::

  >>> import requests
  >>> req = requests.Request('GET', 'https://httpbin.org/get')
  >>> req.prepare()
  <PreparedRequest [GET]>

==============================
requests.Request.deregister_hook
(self, event, hook)
Deregister a previously registered hook.
Returns True if the hook existed, False if not.

==============================
requests.Request.prepare
(self)
Constructs a :class:`PreparedRequest <PreparedRequest>` for transmission and returns it.

==============================
requests.Request.register_hook
(self, event, hook)
Properly register a hook.

==============================
requests.RequestException
(*args, **kwargs)
There was an ambiguous exception that occurred while handling your
request.

==============================
requests.RequestException.args
None

==============================
requests.RequestException.characters_written
None

==============================
requests.RequestException.errno
POSIX exception code

==============================
requests.RequestException.filename
exception filename

==============================
requests.RequestException.filename2
second exception filename

==============================
requests.RequestException.strerror
exception strerror

==============================
requests.RequestException.with_traceback
Exception.with_traceback(tb) --
set self.__traceback__ to tb and return self.

==============================
requests.RequestsDependencyWarning
An imported dependency doesn't match the expected version range.

==============================
requests.RequestsDependencyWarning.args
None

==============================
requests.RequestsDependencyWarning.with_traceback
Exception.with_traceback(tb) --
set self.__traceback__ to tb and return self.

==============================
requests.Response
()
The :class:`Response <Response>` object, which contains a
server's response to an HTTP request.

==============================
requests.Response.apparent_encoding
The apparent encoding, provided by the chardet library.

==============================
requests.Response.close
(self)
Releases the connection back to the pool
Once this method has been
called the underlying ``raw`` object must not be accessed again.

*Note: Should not normally need to be called explicitly.*

==============================
requests.Response.content
Content of the response, in bytes.

==============================
requests.Response.is_permanent_redirect
True if this Response one of the permanent versions of redirect.

==============================
requests.Response.is_redirect
True if this Response is a well-formed HTTP redirect that could have
been processed automatically (by :meth:`Session.resolve_redirects`).

==============================
requests.Response.iter_content
(self, chunk_size=1, decode_unicode=False)
Iterates over the response data
 When stream=True is set on the
request, this avoids reading the content at once into memory for
large responses
 The chunk size is the number of bytes it should
read into memory
 This is not necessarily the length of each item
returned as decoding can take place.

chunk_size must be of type int or None
A value of None will
function differently depending on the value of `stream`.
stream=True will read data as it arrives in whatever size the
chunks are received
If stream=False, data is returned as
a single chunk.

If decode_unicode is True, content will be decoded using the best
available encoding based on the response.

==============================
requests.Response.iter_lines
(self, chunk_size=512, decode_unicode=False, delimiter=None)
Iterates over the response data, one line at a time
 When
stream=True is set on the request, this avoids reading the
content at once into memory for large responses.

.
note:: This method is not reentrant safe.

==============================
requests.Response.json
(self, **kwargs)
Returns the json-encoded content of a response, if any.

:param \*\*kwargs: Optional arguments that ``json.loads`` takes.
:raises ValueError: If the response body does not contain valid json.

==============================
requests.Response.links
Returns the parsed header links of the response, if any.

==============================
requests.Response.next
Returns a PreparedRequest for the next request in a redirect chain, if there is one.

==============================
requests.Response.ok
Returns True if :attr:`status_code` is less than 400, False if not.

This attribute checks if the status code of the response is between
400 and 600 to see if there was a client error or a server error
If
the status code is between 200 and 400, this will return True
This
is **not** a check to see if the response code is ``200 OK``.

==============================
requests.Response.raise_for_status
(self)
Raises stored :class:`HTTPError`, if one occurred.

==============================
requests.Response.text
Content of the response, in unicode.

If Response.encoding is None, encoding will be guessed using
``chardet``.

The encoding of the response content is determined based solely on HTTP
headers, following RFC 2616 to the letter
If you can take advantage of
non-HTTP knowledge to make a better guess at the encoding, you should
set ``r.encoding`` appropriately before accessing this property.

==============================
requests.Session
()
A Requests session.

Provides cookie persistence, connection-pooling, and configuration.

Basic Usage::

  >>> import requests
  >>> s = requests.Session()
  >>> s.get('https://httpbin.org/get')
  <Response [200]>

Or as a context manager::

  >>> with requests.Session() as s:
  >>>     s.get('https://httpbin.org/get')
  <Response [200]>

==============================
requests.Session.close
(self)
Closes all adapters and as such the session

==============================
requests.Session.delete
(self, url, **kwargs)
Sends a DELETE request
Returns :class:`Response` object.

:param url: URL for the new :class:`Request` object.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:rtype: requests.Response

==============================
requests.Session.get
(self, url, **kwargs)
Sends a GET request
Returns :class:`Response` object.

:param url: URL for the new :class:`Request` object.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:rtype: requests.Response

==============================
requests.Session.get_adapter
(self, url)
Returns the appropriate connection adapter for the given URL.

:rtype: requests.adapters.BaseAdapter

==============================
requests.Session.get_redirect_target
(self, resp)
Receives a Response
Returns a redirect URI or ``None``

==============================
requests.Session.head
(self, url, **kwargs)
Sends a HEAD request
Returns :class:`Response` object.

:param url: URL for the new :class:`Request` object.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:rtype: requests.Response

==============================
requests.Session.merge_environment_settings
(self, url, proxies, stream, verify, cert)
Check the environment and merge it with some settings.

:rtype: dict

==============================
requests.Session.mount
(self, prefix, adapter)
Registers a connection adapter to a prefix.

Adapters are sorted in descending order by prefix length.

==============================
requests.Session.options
(self, url, **kwargs)
Sends a OPTIONS request
Returns :class:`Response` object.

:param url: URL for the new :class:`Request` object.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:rtype: requests.Response

==============================
requests.Session.patch
(self, url, data=None, **kwargs)
Sends a PATCH request
Returns :class:`Response` object.

:param url: URL for the new :class:`Request` object.
:param data: (optional) Dictionary, list of tuples, bytes, or file-like
    object to send in the body of the :class:`Request`.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:rtype: requests.Response

==============================
requests.Session.post
(self, url, data=None, json=None, **kwargs)
Sends a POST request
Returns :class:`Response` object.

:param url: URL for the new :class:`Request` object.
:param data: (optional) Dictionary, list of tuples, bytes, or file-like
    object to send in the body of the :class:`Request`.
:param json: (optional) json to send in the body of the :class:`Request`.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:rtype: requests.Response

==============================
requests.Session.prepare_request
(self, request)
Constructs a :class:`PreparedRequest <PreparedRequest>` for
transmission and returns it
The :class:`PreparedRequest` has settings
merged from the :class:`Request <Request>` instance and those of the
:class:`Session`.

:param request: :class:`Request` instance to prepare with this
    session's settings.
:rtype: requests.PreparedRequest

==============================
requests.Session.put
(self, url, data=None, **kwargs)
Sends a PUT request
Returns :class:`Response` object.

:param url: URL for the new :class:`Request` object.
:param data: (optional) Dictionary, list of tuples, bytes, or file-like
    object to send in the body of the :class:`Request`.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:rtype: requests.Response

==============================
requests.Session.rebuild_auth
(self, prepared_request, response)
When being redirected we may want to strip authentication from the
request to avoid leaking credentials
This method intelligently removes
and reapplies authentication where possible to avoid credential loss.

==============================
requests.Session.rebuild_method
(self, prepared_request, response)
When being redirected we may want to change the method of the request
based on certain specs or browser behavior.

==============================
requests.Session.rebuild_proxies
(self, prepared_request, proxies)
This method re-evaluates the proxy configuration by considering the
environment variables
If we are redirected to a URL covered by
NO_PROXY, we strip the proxy configuration
Otherwise, we set missing
proxy keys for this URL (in case they were stripped by a previous
redirect).

This method also replaces the Proxy-Authorization header where
necessary.

:rtype: dict

==============================
requests.Session.request
(self, method, url, params=None, data=None, headers=None, cookies=None, files=None, auth=None, timeout=None, allow_redirects=True, proxies=None, hooks=None, stream=None, verify=None, cert=None, json=None)
Constructs a :class:`Request <Request>`, prepares it and sends it.
Returns :class:`Response <Response>` object.

:param method: method for the new :class:`Request` object.
:param url: URL for the new :class:`Request` object.
:param params: (optional) Dictionary or bytes to be sent in the query
    string for the :class:`Request`.
:param data: (optional) Dictionary, list of tuples, bytes, or file-like
    object to send in the body of the :class:`Request`.
:param json: (optional) json to send in the body of the
    :class:`Request`.
:param headers: (optional) Dictionary of HTTP Headers to send with the
    :class:`Request`.
:param cookies: (optional) Dict or CookieJar object to send with the
    :class:`Request`.
:param files: (optional) Dictionary of ``'filename': file-like-objects``
    for multipart encoding upload.
:param auth: (optional) Auth tuple or callable to enable
    Basic/Digest/Custom HTTP Auth.
:param timeout: (optional) How long to wait for the server to send
    data before giving up, as a float, or a :ref:`(connect timeout,
    read timeout) <timeouts>` tuple.
:type timeout: float or tuple
:param allow_redirects: (optional) Set to True by default.
:type allow_redirects: bool
:param proxies: (optional) Dictionary mapping protocol or protocol and
    hostname to the URL of the proxy.
:param stream: (optional) whether to immediately download the response
    content
Defaults to ``False``.
:param verify: (optional) Either a boolean, in which case it controls whether we verify
    the server's TLS certificate, or a string, in which case it must be a path
    to a CA bundle to use
Defaults to ``True``.
:param cert: (optional) if String, path to ssl client cert file (.pem).
    If Tuple, ('cert', 'key') pair.
:rtype: requests.Response

==============================
requests.Session.resolve_redirects
(self, resp, req, stream=False, timeout=None, verify=True, cert=None, proxies=None, yield_requests=False, **adapter_kwargs)
Receives a Response
Returns a generator of Responses or Requests.

==============================
requests.Session.send
(self, request, **kwargs)
Send a given PreparedRequest.

:rtype: requests.Response

==============================
requests.Session.should_strip_auth
(self, old_url, new_url)
Decide whether Authorization header should be removed when redirecting

==============================
requests.Timeout
(*args, **kwargs)
The request timed out.

Catching this error will catch both
:exc:`~requests.exceptions.ConnectTimeout` and
:exc:`~requests.exceptions.ReadTimeout` errors.

==============================
requests.Timeout.args
None

==============================
requests.Timeout.characters_written
None

==============================
requests.Timeout.errno
POSIX exception code

==============================
requests.Timeout.filename
exception filename

==============================
requests.Timeout.filename2
second exception filename

==============================
requests.Timeout.strerror
exception strerror

==============================
requests.Timeout.with_traceback
Exception.with_traceback(tb) --
set self.__traceback__ to tb and return self.

==============================
requests.TooManyRedirects
(*args, **kwargs)
Too many redirects.

==============================
requests.TooManyRedirects.args
None

==============================
requests.TooManyRedirects.characters_written
None

==============================
requests.TooManyRedirects.errno
POSIX exception code

==============================
requests.TooManyRedirects.filename
exception filename

==============================
requests.TooManyRedirects.filename2
second exception filename

==============================
requests.TooManyRedirects.strerror
exception strerror

==============================
requests.TooManyRedirects.with_traceback
Exception.with_traceback(tb) --
set self.__traceback__ to tb and return self.

==============================
requests.URLRequired
(*args, **kwargs)
A valid URL is required to make a request.

==============================
requests.URLRequired.args
None

==============================
requests.URLRequired.characters_written
None

==============================
requests.URLRequired.errno
POSIX exception code

==============================
requests.URLRequired.filename
exception filename

==============================
requests.URLRequired.filename2
second exception filename

==============================
requests.URLRequired.strerror
exception strerror

==============================
requests.URLRequired.with_traceback
Exception.with_traceback(tb) --
set self.__traceback__ to tb and return self.

==============================
requests.adapters
requests.adapters
~~~~~~~~~~~~~~~~~

This module contains the transport adapters that Requests uses to define
and maintain connections.

==============================
requests.api
requests.api
~~~~~~~~~~~~

This module implements the Requests API.

:copyright: (c) 2012 by Kenneth Reitz.
:license: Apache2, see LICENSE for more details.

==============================
requests.auth
requests.auth
~~~~~~~~~~~~~

This module contains the authentication handlers for Requests.

==============================
requests.certs
requests.certs
~~~~~~~~~~~~~~

This module returns the preferred default CA certificate bundle
There is
only one — the one from the certifi package.

If you are packaging Requests, e.g., for a Linux distribution or a managed
environment, you can change the definition of where() to return a separately
packaged CA bundle.

==============================
requests.chardet
None

==============================
requests.check_compatibility
(urllib3_version, chardet_version)
None

==============================
requests.codes
Dictionary lookup object.

==============================
requests.compat
requests.compat
~~~~~~~~~~~~~~~

This module handles import compatibility issues between Python 2 and
Python 3.

==============================
requests.cookies
requests.cookies
~~~~~~~~~~~~~~~~

Compatibility code to be able to use `cookielib.CookieJar` with requests.

requests.utils imports from here, so be careful with imports.

==============================
requests.cryptography_version
str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object
If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.

==============================
requests.delete
(url, **kwargs)
Sends a DELETE request.

:param url: URL for the new :class:`Request` object.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:return: :class:`Response <Response>` object
:rtype: requests.Response

==============================
requests.exceptions
requests.exceptions
~~~~~~~~~~~~~~~~~~~

This module contains the set of Requests' exceptions.

==============================
requests.get
(url, params=None, **kwargs)
Sends a GET request.

:param url: URL for the new :class:`Request` object.
:param params: (optional) Dictionary, list of tuples or bytes to send
    in the query string for the :class:`Request`.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:return: :class:`Response <Response>` object
:rtype: requests.Response

==============================
requests.head
(url, **kwargs)
Sends a HEAD request.

:param url: URL for the new :class:`Request` object.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:return: :class:`Response <Response>` object
:rtype: requests.Response

==============================
requests.hooks
requests.hooks
~~~~~~~~~~~~~~

This module provides the capabilities for the Requests hooks system.

Available hooks:

``response``:
    The response generated from a Request.

==============================
requests.logging
Logging package for Python
Based on PEP 282 and comments thereto in
comp.lang.python.

Copyright (C) 2001-2017 Vinay Sajip
All Rights Reserved.

To use, simply 'import logging' and log away!

==============================
requests.models
requests.models
~~~~~~~~~~~~~~~

This module contains the primary objects that power Requests.

==============================
requests.options
(url, **kwargs)
Sends an OPTIONS request.

:param url: URL for the new :class:`Request` object.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:return: :class:`Response <Response>` object
:rtype: requests.Response

==============================
requests.packages
None

==============================
requests.patch
(url, data=None, **kwargs)
Sends a PATCH request.

:param url: URL for the new :class:`Request` object.
:param data: (optional) Dictionary, list of tuples, bytes, or file-like
    object to send in the body of the :class:`Request`.
:param json: (optional) json data to send in the body of the :class:`Request`.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:return: :class:`Response <Response>` object
:rtype: requests.Response

==============================
requests.post
(url, data=None, json=None, **kwargs)
Sends a POST request.

:param url: URL for the new :class:`Request` object.
:param data: (optional) Dictionary, list of tuples, bytes, or file-like
    object to send in the body of the :class:`Request`.
:param json: (optional) json data to send in the body of the :class:`Request`.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:return: :class:`Response <Response>` object
:rtype: requests.Response

==============================
requests.put
(url, data=None, **kwargs)
Sends a PUT request.

:param url: URL for the new :class:`Request` object.
:param data: (optional) Dictionary, list of tuples, bytes, or file-like
    object to send in the body of the :class:`Request`.
:param json: (optional) json data to send in the body of the :class:`Request`.
:param \*\*kwargs: Optional arguments that ``request`` takes.
:return: :class:`Response <Response>` object
:rtype: requests.Response

==============================
requests.pyopenssl
SSL with SNI_-support for Python 2
Follow these instructions if you would
like to verify SSL certificates in Python 2
Note, the default libraries do
*not* do certificate checking; you need to do additional work to validate
certificates yourself.

This needs the following packages installed:

* pyOpenSSL (tested with 16.0.0)
* cryptography (minimum 1.3.4, from pyopenssl)
* idna (minimum 2.0, from cryptography)

However, pyopenssl depends on cryptography, which depends on idna, so while we
use all three directly here we end up having relatively few packages required.

You can install them with the following command:

    pip install pyopenssl cryptography idna

To activate certificate checking, call
:func:`~urllib3.contrib.pyopenssl.inject_into_urllib3` from your Python code
before you begin making HTTP requests
This can be done in a ``sitecustomize``
module, or at any other time before your application begins using ``urllib3``,
like this::

    try:
        import urllib3.contrib.pyopenssl
        urllib3.contrib.pyopenssl.inject_into_urllib3()
    except ImportError:
        pass

Now you can use :mod:`urllib3` as you normally would, and it will support SNI
when the required modules are installed.

Activating this module also has the positive side effect of disabling SSL/TLS
compression in Python 2 (see `CRIME attack`_).

If you want to configure the default list of supported cipher suites, you can
set the ``urllib3.contrib.pyopenssl.DEFAULT_SSL_CIPHER_LIST`` variable.

.
_sni: https://en.wikipedia.org/wiki/Server_Name_Indication
.
_crime attack: https://en.wikipedia.org/wiki/CRIME_(security_exploit)

==============================
requests.request
(method, url, **kwargs)
Constructs and sends a :class:`Request <Request>`.

:param method: method for the new :class:`Request` object.
:param url: URL for the new :class:`Request` object.
:param params: (optional) Dictionary, list of tuples or bytes to send
    in the query string for the :class:`Request`.
:param data: (optional) Dictionary, list of tuples, bytes, or file-like
    object to send in the body of the :class:`Request`.
:param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.
:param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.
:param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.
:param files: (optional) Dictionary of ``'name': file-like-objects`` (or ``{'name': file-tuple}``) for multipart encoding upload.
    ``file-tuple`` can be a 2-tuple ``('filename', fileobj)``, 3-tuple ``('filename', fileobj, 'content_type')``
    or a 4-tuple ``('filename', fileobj, 'content_type', custom_headers)``, where ``'content-type'`` is a string
    defining the content type of the given file and ``custom_headers`` a dict-like object containing additional headers
    to add for the file.
:param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.
:param timeout: (optional) How many seconds to wait for the server to send data
    before giving up, as a float, or a :ref:`(connect timeout, read
    timeout) <timeouts>` tuple.
:type timeout: float or tuple
:param allow_redirects: (optional) Boolean
Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection
Defaults to ``True``.
:type allow_redirects: bool
:param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.
:param verify: (optional) Either a boolean, in which case it controls whether we verify
        the server's TLS certificate, or a string, in which case it must be a path
        to a CA bundle to use
Defaults to ``True``.
:param stream: (optional) if ``False``, the response content will be immediately downloaded.
:param cert: (optional) if String, path to ssl client cert file (.pem)
If Tuple, ('cert', 'key') pair.
:return: :class:`Response <Response>` object
:rtype: requests.Response

Usage::

  >>> import requests
  >>> req = requests.request('GET', 'https://httpbin.org/get')
  <Response [200]>

==============================
requests.session
()
Returns a :class:`Session` for context-management.

.
deprecated:: 1.0.0

    This method has been deprecated since version 1.0.0 and is only kept for
    backwards compatibility
New code should use :class:`~requests.sessions.Session`
    to create a session
This may be removed at a future date.

:rtype: Session

==============================
requests.sessions
requests.session
~~~~~~~~~~~~~~~~

This module provides a Session object to manage and persist settings across
requests (cookies, auth, proxies).

==============================
requests.status_codes
The ``codes`` object defines a mapping from common names for HTTP statuses
to their numerical codes, accessible either as attributes or as dictionary
items.

>>> requests.codes['temporary_redirect']
307
>>> requests.codes.teapot
418
>>> requests.codes['\o/']
200

Some codes have multiple names, and both upper- and lower-case versions of
the names are allowed
For example, ``codes.ok``, ``codes.OK``, and
``codes.okay`` all correspond to the HTTP status code 200.

* 100: ``continue``
* 101: ``switching_protocols``
* 102: ``processing``
* 103: ``checkpoint``
* 122: ``uri_too_long``, ``request_uri_too_long``
* 200: ``ok``, ``okay``, ``all_ok``, ``all_okay``, ``all_good``, ``\o/``, ``✓``
* 201: ``created``
* 202: ``accepted``
* 203: ``non_authoritative_info``, ``non_authoritative_information``
* 204: ``no_content``
* 205: ``reset_content``, ``reset``
* 206: ``partial_content``, ``partial``
* 207: ``multi_status``, ``multiple_status``, ``multi_stati``, ``multiple_stati``
* 208: ``already_reported``
* 226: ``im_used``
* 300: ``multiple_choices``
* 301: ``moved_permanently``, ``moved``, ``\o-``
* 302: ``found``
* 303: ``see_other``, ``other``
* 304: ``not_modified``
* 305: ``use_proxy``
* 306: ``switch_proxy``
* 307: ``temporary_redirect``, ``temporary_moved``, ``temporary``
* 308: ``permanent_redirect``, ``resume_incomplete``, ``resume``
* 400: ``bad_request``, ``bad``
* 401: ``unauthorized``
* 402: ``payment_required``, ``payment``
* 403: ``forbidden``
* 404: ``not_found``, ``-o-``
* 405: ``method_not_allowed``, ``not_allowed``
* 406: ``not_acceptable``
* 407: ``proxy_authentication_required``, ``proxy_auth``, ``proxy_authentication``
* 408: ``request_timeout``, ``timeout``
* 409: ``conflict``
* 410: ``gone``
* 411: ``length_required``
* 412: ``precondition_failed``, ``precondition``
* 413: ``request_entity_too_large``
* 414: ``request_uri_too_large``
* 415: ``unsupported_media_type``, ``unsupported_media``, ``media_type``
* 416: ``requested_range_not_satisfiable``, ``requested_range``, ``range_not_satisfiable``
* 417: ``expectation_failed``
* 418: ``im_a_teapot``, ``teapot``, ``i_am_a_teapot``
* 421: ``misdirected_request``
* 422: ``unprocessable_entity``, ``unprocessable``
* 423: ``locked``
* 424: ``failed_dependency``, ``dependency``
* 425: ``unordered_collection``, ``unordered``
* 426: ``upgrade_required``, ``upgrade``
* 428: ``precondition_required``, ``precondition``
* 429: ``too_many_requests``, ``too_many``
* 431: ``header_fields_too_large``, ``fields_too_large``
* 444: ``no_response``, ``none``
* 449: ``retry_with``, ``retry``
* 450: ``blocked_by_windows_parental_controls``, ``parental_controls``
* 451: ``unavailable_for_legal_reasons``, ``legal_reasons``
* 499: ``client_closed_request``
* 500: ``internal_server_error``, ``server_error``, ``/o\``, ``✗``
* 501: ``not_implemented``
* 502: ``bad_gateway``
* 503: ``service_unavailable``, ``unavailable``
* 504: ``gateway_timeout``
* 505: ``http_version_not_supported``, ``http_version``
* 506: ``variant_also_negotiates``
* 507: ``insufficient_storage``
* 509: ``bandwidth_limit_exceeded``, ``bandwidth``
* 510: ``not_extended``
* 511: ``network_authentication_required``, ``network_auth``, ``network_authentication``

==============================
requests.structures
requests.structures
~~~~~~~~~~~~~~~~~~~

Data structures that power Requests.

==============================
requests.urllib3
urllib3 - Thread-safe connection pooling and re-using.

==============================
requests.utils
requests.utils
~~~~~~~~~~~~~~

This module provides utility functions that are used within Requests
that are also useful for external consumption.

==============================
requests.warnings
Python part of the warnings subsystem.

