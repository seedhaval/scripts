==============================
tempfile.NamedTemporaryFile
(mode='w+b', buffering=-1, encoding=None, newline=None, suffix=None, prefix=None, dir=None, delete=True, *, errors=None)
Create and return a temporary file.
Arguments:
'prefix', 'suffix', 'dir' -- as for mkstemp.
'mode' -- the mode argument to io.open (default "w+b").
'buffering' -- the buffer size argument to io.open (default -1).
'encoding' -- the encoding argument to io.open (default None)
'newline' -- the newline argument to io.open (default None)
'delete' -- whether the file is deleted on close (default True).
'errors' -- the errors argument to io.open (default None)
The file is created as mkstemp() would do it.

Returns an object with a file-like interface; the name of the file
is accessible as its 'name' attribute
 The file will be automatically
deleted when it is closed unless the 'delete' argument is set to False.

==============================
tempfile.SpooledTemporaryFile
(max_size=0, mode='w+b', buffering=-1, encoding=None, newline=None, suffix=None, prefix=None, dir=None, *, errors=None)
Temporary file wrapper, specialized to switch from BytesIO
or StringIO to a real file when it exceeds a certain size or
when a fileno is needed.

==============================
tempfile.SpooledTemporaryFile.close
(self)
None

==============================
tempfile.SpooledTemporaryFile.closed
None

==============================
tempfile.SpooledTemporaryFile.encoding
None

==============================
tempfile.SpooledTemporaryFile.errors
None

==============================
tempfile.SpooledTemporaryFile.fileno
(self)
None

==============================
tempfile.SpooledTemporaryFile.flush
(self)
None

==============================
tempfile.SpooledTemporaryFile.isatty
(self)
None

==============================
tempfile.SpooledTemporaryFile.mode
None

==============================
tempfile.SpooledTemporaryFile.name
None

==============================
tempfile.SpooledTemporaryFile.newlines
None

==============================
tempfile.SpooledTemporaryFile.read
(self, *args)
None

==============================
tempfile.SpooledTemporaryFile.readline
(self, *args)
None

==============================
tempfile.SpooledTemporaryFile.readlines
(self, *args)
None

==============================
tempfile.SpooledTemporaryFile.rollover
(self)
None

==============================
tempfile.SpooledTemporaryFile.seek
(self, *args)
None

==============================
tempfile.SpooledTemporaryFile.softspace
None

==============================
tempfile.SpooledTemporaryFile.tell
(self)
None

==============================
tempfile.SpooledTemporaryFile.truncate
(self, size=None)
None

==============================
tempfile.SpooledTemporaryFile.write
(self, s)
None

==============================
tempfile.SpooledTemporaryFile.writelines
(self, iterable)
None

==============================
tempfile.TMP_MAX
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
tempfile.TemporaryDirectory
(suffix=None, prefix=None, dir=None)
Create and return a temporary directory
 This has the same
behavior as mkdtemp but can be used as a context manager
 For
example:

    with TemporaryDirectory() as tmpdir:
        ...

Upon exiting the context, the directory and everything contained
in it are removed.

==============================
tempfile.TemporaryDirectory.cleanup
(self)
None

==============================
tempfile.TemporaryFile
(mode='w+b', buffering=-1, encoding=None, newline=None, suffix=None, prefix=None, dir=None, *, errors=None)
Create and return a temporary file.
Arguments:
'prefix', 'suffix', 'dir' -- as for mkstemp.
'mode' -- the mode argument to io.open (default "w+b").
'buffering' -- the buffer size argument to io.open (default -1).
'encoding' -- the encoding argument to io.open (default None)
'newline' -- the newline argument to io.open (default None)
'errors' -- the errors argument to io.open (default None)
The file is created as mkstemp() would do it.

Returns an object with a file-like interface
 The file has no
name, and will cease to exist when it is closed.

==============================
tempfile.gettempdir
()
Accessor for tempfile.tempdir.

==============================
tempfile.gettempdirb
()
A bytes version of tempfile.gettempdir().

==============================
tempfile.gettempprefix
()
The default prefix for temporary directories.

==============================
tempfile.gettempprefixb
()
The default prefix for temporary directories as bytes.

==============================
tempfile.mkdtemp
(suffix=None, prefix=None, dir=None)
User-callable function to create and return a unique temporary
directory
 The return value is the pathname of the directory.

Arguments are as for mkstemp, except that the 'text' argument is
not accepted.

The directory is readable, writable, and searchable only by the
creating user.

Caller is responsible for deleting the directory when done with it.

==============================
tempfile.mkstemp
(suffix=None, prefix=None, dir=None, text=False)
User-callable function to create and return a unique temporary
file
 The return value is a pair (fd, name) where fd is the
file descriptor returned by os.open, and name is the filename.

If 'suffix' is not None, the file name will end with that suffix,
otherwise there will be no suffix.

If 'prefix' is not None, the file name will begin with that prefix,
otherwise a default prefix is used.

If 'dir' is not None, the file will be created in that directory,
otherwise a default directory is used.

If 'text' is specified and true, the file is opened in text
mode
 Else (the default) the file is opened in binary mode.

If any of 'suffix', 'prefix' and 'dir' are not None, they must be the
same type
 If they are bytes, the returned name will be bytes; str
otherwise.

The file is readable and writable only by the creating user ID.
If the operating system uses permission bits to indicate whether a
file is executable, the file is executable by no one
The file
descriptor is not inherited by children of this process.

Caller is responsible for deleting the file when done with it.

==============================
tempfile.mktemp
(suffix='', prefix='tmp', dir=None)
User-callable function to return a unique temporary file name
 The
file is not created.

Arguments are similar to mkstemp, except that the 'text' argument is
not accepted, and suffix=None, prefix=None and bytes file names are not
supported.

THIS FUNCTION IS UNSAFE AND SHOULD NOT BE USED
 The file name may
refer to a file that did not exist at some point, but by the time
you get around to creating it, someone else may have beaten you to
the punch.

==============================
tempfile.tempdir
None

==============================
tempfile.template
str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object
If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.

