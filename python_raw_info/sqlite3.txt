==============================
sqlite3.Binary
(object)
Create a new memoryview object which references the given object.

==============================
sqlite3.Binary.c_contiguous
A bool indicating whether the memory is C contiguous.

==============================
sqlite3.Binary.cast
(self, /, format, *, shape)
Cast a memoryview to a new format or shape.

==============================
sqlite3.Binary.contiguous
A bool indicating whether the memory is contiguous.

==============================
sqlite3.Binary.f_contiguous
A bool indicating whether the memory is Fortran contiguous.

==============================
sqlite3.Binary.format
A string containing the format (in struct module style)
for each element in the view.

==============================
sqlite3.Binary.hex
Return the data in the buffer as a str of hexadecimal numbers.

  sep
    An optional single character or byte to separate hex bytes.
  bytes_per_sep
    How many bytes between separators
 Positive values count from the
    right, negative values count from the left.

Example:
>>> value = memoryview(b'\xb9\x01\xef')
>>> value.hex()
'b901ef'
>>> value.hex(':')
'b9:01:ef'
>>> value.hex(':', 2)
'b9:01ef'
>>> value.hex(':', -2)
'b901:ef'

==============================
sqlite3.Binary.itemsize
The size in bytes of each element of the memoryview.

==============================
sqlite3.Binary.nbytes
The amount of space in bytes that the array would use in
a contiguous representation.

==============================
sqlite3.Binary.ndim
An integer indicating how many dimensions of a multi-dimensional
array the memory represents.

==============================
sqlite3.Binary.obj
The underlying object of the memoryview.

==============================
sqlite3.Binary.readonly
A bool indicating whether the memory is read only.

==============================
sqlite3.Binary.release
(self, /)
Release the underlying buffer exposed by the memoryview object.

==============================
sqlite3.Binary.shape
A tuple of ndim integers giving the shape of the memory
as an N-dimensional array.

==============================
sqlite3.Binary.strides
A tuple of ndim integers giving the size in bytes to access
each element for each dimension of the array.

==============================
sqlite3.Binary.suboffsets
A tuple of integers used internally for PIL-style arrays.

==============================
sqlite3.Binary.tobytes
(self, /, order=None)
Return the data in the buffer as a byte string
Order can be {'C', 'F', 'A'}.
When order is 'C' or 'F', the data of the original array is converted to C or
Fortran order
For contiguous views, 'A' returns an exact copy of the physical
memory
In particular, in-memory Fortran order is preserved
For non-contiguous
views, the data is converted to C first
order=None is the same as order='C'.

==============================
sqlite3.Binary.tolist
(self, /)
Return the data in the buffer as a list of elements.

==============================
sqlite3.Binary.toreadonly
(self, /)
Return a readonly version of the memoryview.

==============================
sqlite3.Connection
SQLite database connection object.

==============================
sqlite3.Connection.DataError
None

==============================
sqlite3.Connection.DatabaseError
None

==============================
sqlite3.Connection.Error
None

==============================
sqlite3.Connection.IntegrityError
None

==============================
sqlite3.Connection.InterfaceError
None

==============================
sqlite3.Connection.InternalError
None

==============================
sqlite3.Connection.NotSupportedError
None

==============================
sqlite3.Connection.OperationalError
None

==============================
sqlite3.Connection.ProgrammingError
None

==============================
sqlite3.Connection.Warning
None

==============================
sqlite3.Connection.backup
Makes a backup of the database
Non-standard.

==============================
sqlite3.Connection.close
Closes the connection.

==============================
sqlite3.Connection.commit
Commit the current transaction.

==============================
sqlite3.Connection.create_aggregate
Creates a new aggregate
Non-standard.

==============================
sqlite3.Connection.create_collation
Creates a collation function
Non-standard.

==============================
sqlite3.Connection.create_function
Creates a new function
Non-standard.

==============================
sqlite3.Connection.cursor
Return a cursor for the connection.

==============================
sqlite3.Connection.enable_load_extension
Enable dynamic loading of SQLite extension modules
Non-standard.

==============================
sqlite3.Connection.execute
Executes a SQL statement
Non-standard.

==============================
sqlite3.Connection.executemany
Repeatedly executes a SQL statement
Non-standard.

==============================
sqlite3.Connection.executescript
Executes a multiple SQL statements at once
Non-standard.

==============================
sqlite3.Connection.in_transaction
None

==============================
sqlite3.Connection.interrupt
Abort any pending database operation
Non-standard.

==============================
sqlite3.Connection.isolation_level
None

==============================
sqlite3.Connection.iterdump
Returns iterator to the dump of the database in an SQL text format
Non-standard.

==============================
sqlite3.Connection.load_extension
Load SQLite extension module
Non-standard.

==============================
sqlite3.Connection.rollback
Roll back the current transaction.

==============================
sqlite3.Connection.row_factory
None

==============================
sqlite3.Connection.set_authorizer
Sets authorizer callback
Non-standard.

==============================
sqlite3.Connection.set_progress_handler
Sets progress handler callback
Non-standard.

==============================
sqlite3.Connection.set_trace_callback
Sets a trace callback called for each SQL statement (passed as unicode)
Non-standard.

==============================
sqlite3.Connection.text_factory
None

==============================
sqlite3.Connection.total_changes
None

==============================
sqlite3.Cursor
SQLite database cursor class.

==============================
sqlite3.Cursor.arraysize
None

==============================
sqlite3.Cursor.close
Closes the cursor.

==============================
sqlite3.Cursor.connection
None

==============================
sqlite3.Cursor.description
None

==============================
sqlite3.Cursor.execute
Executes a SQL statement.

==============================
sqlite3.Cursor.executemany
Repeatedly executes a SQL statement.

==============================
sqlite3.Cursor.executescript
Executes a multiple SQL statements at once
Non-standard.

==============================
sqlite3.Cursor.fetchall
Fetches all rows from the resultset.

==============================
sqlite3.Cursor.fetchmany
Fetches several rows from the resultset.

==============================
sqlite3.Cursor.fetchone
Fetches one row from the resultset.

==============================
sqlite3.Cursor.lastrowid
None

==============================
sqlite3.Cursor.row_factory
None

==============================
sqlite3.Cursor.rowcount
None

==============================
sqlite3.Cursor.setinputsizes
Required by DB-API
Does nothing in pysqlite.

==============================
sqlite3.Cursor.setoutputsize
Required by DB-API
Does nothing in pysqlite.

==============================
sqlite3.DataError
Common base class for all non-exit exceptions.

==============================
sqlite3.DataError.args
None

==============================
sqlite3.DataError.with_traceback
Exception.with_traceback(tb) --
set self.__traceback__ to tb and return self.

==============================
sqlite3.DatabaseError
Common base class for all non-exit exceptions.

==============================
sqlite3.DatabaseError.args
None

==============================
sqlite3.DatabaseError.with_traceback
Exception.with_traceback(tb) --
set self.__traceback__ to tb and return self.

==============================
sqlite3.Date
date(year, month, day) --> date object

==============================
sqlite3.Date.ctime
Return ctime() style string.

==============================
sqlite3.Date.day
None

==============================
sqlite3.Date.fromisocalendar
int, int, int -> Construct a date from the ISO year, week number and weekday.

This is the inverse of the date.isocalendar() function

==============================
sqlite3.Date.fromisoformat
str -> Construct a date from the output of date.isoformat()

==============================
sqlite3.Date.fromordinal
int -> date corresponding to a proleptic Gregorian ordinal.

==============================
sqlite3.Date.fromtimestamp
(timestamp, /)
Create a date from a POSIX timestamp.

The timestamp is a number, e.g
created via time.time(), that is interpreted
as local time.

==============================
sqlite3.Date.isocalendar
Return a 3-tuple containing ISO year, week number, and weekday.

==============================
sqlite3.Date.isoformat
Return string in ISO 8601 format, YYYY-MM-DD.

==============================
sqlite3.Date.isoweekday
Return the day of the week represented by the date.
Monday == 1 ..
Sunday == 7

==============================
sqlite3.Date.max
date(year, month, day) --> date object

==============================
sqlite3.Date.min
date(year, month, day) --> date object

==============================
sqlite3.Date.month
None

==============================
sqlite3.Date.replace
Return date with new specified fields.

==============================
sqlite3.Date.resolution
Difference between two datetime values.

timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0)

All arguments are optional and default to 0.
Arguments may be integers or floats, and may be positive or negative.

==============================
sqlite3.Date.strftime
format -> strftime() style string.

==============================
sqlite3.Date.timetuple
Return time tuple, compatible with time.localtime().

==============================
sqlite3.Date.today
Current date or datetime:  same as self.__class__.fromtimestamp(time.time()).

==============================
sqlite3.Date.toordinal
Return proleptic Gregorian ordinal
 January 1 of year 1 is day 1.

==============================
sqlite3.Date.weekday
Return the day of the week represented by the date.
Monday == 0 ..
Sunday == 6

==============================
sqlite3.Date.year
None

==============================
sqlite3.DateFromTicks
(ticks)
None

==============================
sqlite3.Error
Common base class for all non-exit exceptions.

==============================
sqlite3.Error.args
None

==============================
sqlite3.Error.with_traceback
Exception.with_traceback(tb) --
set self.__traceback__ to tb and return self.

==============================
sqlite3.IntegrityError
Common base class for all non-exit exceptions.

==============================
sqlite3.IntegrityError.args
None

==============================
sqlite3.IntegrityError.with_traceback
Exception.with_traceback(tb) --
set self.__traceback__ to tb and return self.

==============================
sqlite3.InterfaceError
Common base class for all non-exit exceptions.

==============================
sqlite3.InterfaceError.args
None

==============================
sqlite3.InterfaceError.with_traceback
Exception.with_traceback(tb) --
set self.__traceback__ to tb and return self.

==============================
sqlite3.InternalError
Common base class for all non-exit exceptions.

==============================
sqlite3.InternalError.args
None

==============================
sqlite3.InternalError.with_traceback
Exception.with_traceback(tb) --
set self.__traceback__ to tb and return self.

==============================
sqlite3.NotSupportedError
Common base class for all non-exit exceptions.

==============================
sqlite3.NotSupportedError.args
None

==============================
sqlite3.NotSupportedError.with_traceback
Exception.with_traceback(tb) --
set self.__traceback__ to tb and return self.

==============================
sqlite3.OperationalError
Common base class for all non-exit exceptions.

==============================
sqlite3.OperationalError.args
None

==============================
sqlite3.OperationalError.with_traceback
Exception.with_traceback(tb) --
set self.__traceback__ to tb and return self.

==============================
sqlite3.OptimizedUnicode
str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object
If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.

==============================
sqlite3.OptimizedUnicode.capitalize
(self, /)
Return a capitalized version of the string.

More specifically, make the first character have upper case and the rest lower
case.

==============================
sqlite3.OptimizedUnicode.casefold
(self, /)
Return a version of the string suitable for caseless comparisons.

==============================
sqlite3.OptimizedUnicode.center
(self, width, fillchar=' ', /)
Return a centered string of length width.

Padding is done using the specified fill character (default is a space).

==============================
sqlite3.OptimizedUnicode.count
S.count(sub[, start[, end]]) -> int

Return the number of non-overlapping occurrences of substring sub in
string S[start:end]
 Optional arguments start and end are
interpreted as in slice notation.

==============================
sqlite3.OptimizedUnicode.encode
(self, /, encoding='utf-8', errors='strict')
Encode the string using the codec registered for encoding.

encoding
  The encoding in which to encode the string.
errors
  The error handling scheme to use for encoding errors.
  The default is 'strict' meaning that encoding errors raise a
  UnicodeEncodeError
 Other possible values are 'ignore', 'replace' and
  'xmlcharrefreplace' as well as any other name registered with
  codecs.register_error that can handle UnicodeEncodeErrors.

==============================
sqlite3.OptimizedUnicode.endswith
S.endswith(suffix[, start[, end]]) -> bool

Return True if S ends with the specified suffix, False otherwise.
With optional start, test S beginning at that position.
With optional end, stop comparing S at that position.
suffix can also be a tuple of strings to try.

==============================
sqlite3.OptimizedUnicode.expandtabs
(self, /, tabsize=8)
Return a copy where all tab characters are expanded using spaces.

If tabsize is not given, a tab size of 8 characters is assumed.

==============================
sqlite3.OptimizedUnicode.find
S.find(sub[, start[, end]]) -> int

Return the lowest index in S where substring sub is found,
such that sub is contained within S[start:end]
 Optional
arguments start and end are interpreted as in slice notation.

Return -1 on failure.

==============================
sqlite3.OptimizedUnicode.format
S.format(*args, **kwargs) -> str

Return a formatted version of S, using substitutions from args and kwargs.
The substitutions are identified by braces ('{' and '}').

==============================
sqlite3.OptimizedUnicode.format_map
S.format_map(mapping) -> str

Return a formatted version of S, using substitutions from mapping.
The substitutions are identified by braces ('{' and '}').

==============================
sqlite3.OptimizedUnicode.index
S.index(sub[, start[, end]]) -> int

Return the lowest index in S where substring sub is found,
such that sub is contained within S[start:end]
 Optional
arguments start and end are interpreted as in slice notation.

Raises ValueError when the substring is not found.

==============================
sqlite3.OptimizedUnicode.isalnum
(self, /)
Return True if the string is an alpha-numeric string, False otherwise.

A string is alpha-numeric if all characters in the string are alpha-numeric and
there is at least one character in the string.

==============================
sqlite3.OptimizedUnicode.isalpha
(self, /)
Return True if the string is an alphabetic string, False otherwise.

A string is alphabetic if all characters in the string are alphabetic and there
is at least one character in the string.

==============================
sqlite3.OptimizedUnicode.isascii
(self, /)
Return True if all characters in the string are ASCII, False otherwise.

ASCII characters have code points in the range U+0000-U+007F.
Empty string is ASCII too.

==============================
sqlite3.OptimizedUnicode.isdecimal
(self, /)
Return True if the string is a decimal string, False otherwise.

A string is a decimal string if all characters in the string are decimal and
there is at least one character in the string.

==============================
sqlite3.OptimizedUnicode.isdigit
(self, /)
Return True if the string is a digit string, False otherwise.

A string is a digit string if all characters in the string are digits and there
is at least one character in the string.

==============================
sqlite3.OptimizedUnicode.isidentifier
(self, /)
Return True if the string is a valid Python identifier, False otherwise.

Call keyword.iskeyword(s) to test whether string s is a reserved identifier,
such as "def" or "class".

==============================
sqlite3.OptimizedUnicode.islower
(self, /)
Return True if the string is a lowercase string, False otherwise.

A string is lowercase if all cased characters in the string are lowercase and
there is at least one cased character in the string.

==============================
sqlite3.OptimizedUnicode.isnumeric
(self, /)
Return True if the string is a numeric string, False otherwise.

A string is numeric if all characters in the string are numeric and there is at
least one character in the string.

==============================
sqlite3.OptimizedUnicode.isprintable
(self, /)
Return True if the string is printable, False otherwise.

A string is printable if all of its characters are considered printable in
repr() or if it is empty.

==============================
sqlite3.OptimizedUnicode.isspace
(self, /)
Return True if the string is a whitespace string, False otherwise.

A string is whitespace if all characters in the string are whitespace and there
is at least one character in the string.

==============================
sqlite3.OptimizedUnicode.istitle
(self, /)
Return True if the string is a title-cased string, False otherwise.

In a title-cased string, upper- and title-case characters may only
follow uncased characters and lowercase characters only cased ones.

==============================
sqlite3.OptimizedUnicode.isupper
(self, /)
Return True if the string is an uppercase string, False otherwise.

A string is uppercase if all cased characters in the string are uppercase and
there is at least one cased character in the string.

==============================
sqlite3.OptimizedUnicode.join
(self, iterable, /)
Concatenate any number of strings.

The string whose method is called is inserted in between each given string.
The result is returned as a new string.

Example: '.'.join(['ab', 'pq', 'rs']) -> 'ab.pq.rs'

==============================
sqlite3.OptimizedUnicode.ljust
(self, width, fillchar=' ', /)
Return a left-justified string of length width.

Padding is done using the specified fill character (default is a space).

==============================
sqlite3.OptimizedUnicode.lower
(self, /)
Return a copy of the string converted to lowercase.

==============================
sqlite3.OptimizedUnicode.lstrip
(self, chars=None, /)
Return a copy of the string with leading whitespace removed.

If chars is given and not None, remove characters in chars instead.

==============================
sqlite3.OptimizedUnicode.maketrans
Return a translation table usable for str.translate().

If there is only one argument, it must be a dictionary mapping Unicode
ordinals (integers) or characters to Unicode ordinals, strings or None.
Character keys will be then converted to ordinals.
If there are two arguments, they must be strings of equal length, and
in the resulting dictionary, each character in x will be mapped to the
character at the same position in y
If there is a third argument, it
must be a string, whose characters will be mapped to None in the result.

==============================
sqlite3.OptimizedUnicode.partition
(self, sep, /)
Partition the string into three parts using the given separator.

This will search for the separator in the string
 If the separator is found,
returns a 3-tuple containing the part before the separator, the separator
itself, and the part after it.

If the separator is not found, returns a 3-tuple containing the original string
and two empty strings.

==============================
sqlite3.OptimizedUnicode.replace
(self, old, new, count=-1, /)
Return a copy with all occurrences of substring old replaced by new.

  count
    Maximum number of occurrences to replace.
    -1 (the default value) means replace all occurrences.

If the optional argument count is given, only the first count occurrences are
replaced.

==============================
sqlite3.OptimizedUnicode.rfind
S.rfind(sub[, start[, end]]) -> int

Return the highest index in S where substring sub is found,
such that sub is contained within S[start:end]
 Optional
arguments start and end are interpreted as in slice notation.

Return -1 on failure.

==============================
sqlite3.OptimizedUnicode.rindex
S.rindex(sub[, start[, end]]) -> int

Return the highest index in S where substring sub is found,
such that sub is contained within S[start:end]
 Optional
arguments start and end are interpreted as in slice notation.

Raises ValueError when the substring is not found.

==============================
sqlite3.OptimizedUnicode.rjust
(self, width, fillchar=' ', /)
Return a right-justified string of length width.

Padding is done using the specified fill character (default is a space).

==============================
sqlite3.OptimizedUnicode.rpartition
(self, sep, /)
Partition the string into three parts using the given separator.

This will search for the separator in the string, starting at the end
If
the separator is found, returns a 3-tuple containing the part before the
separator, the separator itself, and the part after it.

If the separator is not found, returns a 3-tuple containing two empty strings
and the original string.

==============================
sqlite3.OptimizedUnicode.rsplit
(self, /, sep=None, maxsplit=-1)
Return a list of the words in the string, using sep as the delimiter string.

  sep
    The delimiter according which to split the string.
    None (the default value) means split according to any whitespace,
    and discard empty strings from the result.
  maxsplit
    Maximum number of splits to do.
    -1 (the default value) means no limit.

Splits are done starting at the end of the string and working to the front.

==============================
sqlite3.OptimizedUnicode.rstrip
(self, chars=None, /)
Return a copy of the string with trailing whitespace removed.

If chars is given and not None, remove characters in chars instead.

==============================
sqlite3.OptimizedUnicode.split
(self, /, sep=None, maxsplit=-1)
Return a list of the words in the string, using sep as the delimiter string.

sep
  The delimiter according which to split the string.
  None (the default value) means split according to any whitespace,
  and discard empty strings from the result.
maxsplit
  Maximum number of splits to do.
  -1 (the default value) means no limit.

==============================
sqlite3.OptimizedUnicode.splitlines
(self, /, keepends=False)
Return a list of the lines in the string, breaking at line boundaries.

Line breaks are not included in the resulting list unless keepends is given and
true.

==============================
sqlite3.OptimizedUnicode.startswith
S.startswith(prefix[, start[, end]]) -> bool

Return True if S starts with the specified prefix, False otherwise.
With optional start, test S beginning at that position.
With optional end, stop comparing S at that position.
prefix can also be a tuple of strings to try.

==============================
sqlite3.OptimizedUnicode.strip
(self, chars=None, /)
Return a copy of the string with leading and trailing whitespace removed.

If chars is given and not None, remove characters in chars instead.

==============================
sqlite3.OptimizedUnicode.swapcase
(self, /)
Convert uppercase characters to lowercase and lowercase characters to uppercase.

==============================
sqlite3.OptimizedUnicode.title
(self, /)
Return a version of the string where each word is titlecased.

More specifically, words start with uppercased characters and all remaining
cased characters have lower case.

==============================
sqlite3.OptimizedUnicode.translate
(self, table, /)
Replace each character in the string using the given translation table.

  table
    Translation table, which must be a mapping of Unicode ordinals to
    Unicode ordinals, strings, or None.

The table must implement lookup/indexing via __getitem__, for instance a
dictionary or list
 If this operation raises LookupError, the character is
left untouched
 Characters mapped to None are deleted.

==============================
sqlite3.OptimizedUnicode.upper
(self, /)
Return a copy of the string converted to uppercase.

==============================
sqlite3.OptimizedUnicode.zfill
(self, width, /)
Pad a numeric string with zeros on the left, to fill a field of the given width.

The string is never truncated.

==============================
sqlite3.PARSE_COLNAMES
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.PARSE_DECLTYPES
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.PrepareProtocol
None

==============================
sqlite3.ProgrammingError
Common base class for all non-exit exceptions.

==============================
sqlite3.ProgrammingError.args
None

==============================
sqlite3.ProgrammingError.with_traceback
Exception.with_traceback(tb) --
set self.__traceback__ to tb and return self.

==============================
sqlite3.Row
None

==============================
sqlite3.Row.keys
Returns the keys of the row.

==============================
sqlite3.SQLITE_ALTER_TABLE
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.SQLITE_ANALYZE
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.SQLITE_ATTACH
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.SQLITE_CREATE_INDEX
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.SQLITE_CREATE_TABLE
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.SQLITE_CREATE_TEMP_INDEX
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.SQLITE_CREATE_TEMP_TABLE
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.SQLITE_CREATE_TEMP_TRIGGER
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.SQLITE_CREATE_TEMP_VIEW
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.SQLITE_CREATE_TRIGGER
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.SQLITE_CREATE_VIEW
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.SQLITE_CREATE_VTABLE
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.SQLITE_DELETE
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.SQLITE_DENY
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.SQLITE_DETACH
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.SQLITE_DONE
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.SQLITE_DROP_INDEX
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.SQLITE_DROP_TABLE
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.SQLITE_DROP_TEMP_INDEX
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.SQLITE_DROP_TEMP_TABLE
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.SQLITE_DROP_TEMP_TRIGGER
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.SQLITE_DROP_TEMP_VIEW
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.SQLITE_DROP_TRIGGER
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.SQLITE_DROP_VIEW
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.SQLITE_DROP_VTABLE
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.SQLITE_FUNCTION
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.SQLITE_IGNORE
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.SQLITE_INSERT
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.SQLITE_OK
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.SQLITE_PRAGMA
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.SQLITE_READ
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.SQLITE_RECURSIVE
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.SQLITE_REINDEX
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.SQLITE_SAVEPOINT
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.SQLITE_SELECT
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.SQLITE_TRANSACTION
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.SQLITE_UPDATE
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.Time
time([hour[, minute[, second[, microsecond[, tzinfo]]]]]) --> a time object

All arguments are optional
tzinfo may be None, or an instance of
a tzinfo subclass
The remaining arguments may be ints.

==============================
sqlite3.Time.dst
Return self.tzinfo.dst(self).

==============================
sqlite3.Time.fold
None

==============================
sqlite3.Time.fromisoformat
string -> time from time.isoformat() output

==============================
sqlite3.Time.hour
None

==============================
sqlite3.Time.isoformat
Return string in ISO 8601 format, [HH[:MM[:SS[.mmm[uuu]]]]][+HH:MM].

The optional argument timespec specifies the number of additional terms
of the time to include
Valid options are 'auto', 'hours', 'minutes',
'seconds', 'milliseconds' and 'microseconds'.

==============================
sqlite3.Time.max
time([hour[, minute[, second[, microsecond[, tzinfo]]]]]) --> a time object

All arguments are optional
tzinfo may be None, or an instance of
a tzinfo subclass
The remaining arguments may be ints.

==============================
sqlite3.Time.microsecond
None

==============================
sqlite3.Time.min
time([hour[, minute[, second[, microsecond[, tzinfo]]]]]) --> a time object

All arguments are optional
tzinfo may be None, or an instance of
a tzinfo subclass
The remaining arguments may be ints.

==============================
sqlite3.Time.minute
None

==============================
sqlite3.Time.replace
Return time with new specified fields.

==============================
sqlite3.Time.resolution
Difference between two datetime values.

timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0)

All arguments are optional and default to 0.
Arguments may be integers or floats, and may be positive or negative.

==============================
sqlite3.Time.second
None

==============================
sqlite3.Time.strftime
format -> strftime() style string.

==============================
sqlite3.Time.tzinfo
None

==============================
sqlite3.Time.tzname
Return self.tzinfo.tzname(self).

==============================
sqlite3.Time.utcoffset
Return self.tzinfo.utcoffset(self).

==============================
sqlite3.TimeFromTicks
(ticks)
None

==============================
sqlite3.Timestamp
datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])

The year, month and day arguments are required
tzinfo may be None, or an
instance of a tzinfo subclass
The remaining arguments may be ints.

==============================
sqlite3.Timestamp.astimezone
tz -> convert to local time in new timezone tz

==============================
sqlite3.Timestamp.combine
date, time -> datetime with same date and time fields

==============================
sqlite3.Timestamp.ctime
Return ctime() style string.

==============================
sqlite3.Timestamp.date
Return date object with same year, month and day.

==============================
sqlite3.Timestamp.day
None

==============================
sqlite3.Timestamp.dst
Return self.tzinfo.dst(self).

==============================
sqlite3.Timestamp.fold
None

==============================
sqlite3.Timestamp.fromisocalendar
int, int, int -> Construct a date from the ISO year, week number and weekday.

This is the inverse of the date.isocalendar() function

==============================
sqlite3.Timestamp.fromisoformat
string -> datetime from datetime.isoformat() output

==============================
sqlite3.Timestamp.fromordinal
int -> date corresponding to a proleptic Gregorian ordinal.

==============================
sqlite3.Timestamp.fromtimestamp
timestamp[, tz] -> tz's local time from POSIX timestamp.

==============================
sqlite3.Timestamp.hour
None

==============================
sqlite3.Timestamp.isocalendar
Return a 3-tuple containing ISO year, week number, and weekday.

==============================
sqlite3.Timestamp.isoformat
[sep] -> string in ISO 8601 format, YYYY-MM-DDT[HH[:MM[:SS[.mmm[uuu]]]]][+HH:MM].
sep is used to separate the year from the time, and defaults to 'T'.
The optional argument timespec specifies the number of additional terms
of the time to include
Valid options are 'auto', 'hours', 'minutes',
'seconds', 'milliseconds' and 'microseconds'.

==============================
sqlite3.Timestamp.isoweekday
Return the day of the week represented by the date.
Monday == 1 ..
Sunday == 7

==============================
sqlite3.Timestamp.max
datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])

The year, month and day arguments are required
tzinfo may be None, or an
instance of a tzinfo subclass
The remaining arguments may be ints.

==============================
sqlite3.Timestamp.microsecond
None

==============================
sqlite3.Timestamp.min
datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])

The year, month and day arguments are required
tzinfo may be None, or an
instance of a tzinfo subclass
The remaining arguments may be ints.

==============================
sqlite3.Timestamp.minute
None

==============================
sqlite3.Timestamp.month
None

==============================
sqlite3.Timestamp.now
(tz=None)
Returns new datetime object representing current time local to tz.

  tz
    Timezone object.

If no tz is specified, uses local timezone.

==============================
sqlite3.Timestamp.replace
Return datetime with new specified fields.

==============================
sqlite3.Timestamp.resolution
Difference between two datetime values.

timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0)

All arguments are optional and default to 0.
Arguments may be integers or floats, and may be positive or negative.

==============================
sqlite3.Timestamp.second
None

==============================
sqlite3.Timestamp.strftime
format -> strftime() style string.

==============================
sqlite3.Timestamp.strptime
string, format -> new datetime parsed from a string (like time.strptime()).

==============================
sqlite3.Timestamp.time
Return time object with same time but with tzinfo=None.

==============================
sqlite3.Timestamp.timestamp
Return POSIX timestamp as float.

==============================
sqlite3.Timestamp.timetuple
Return time tuple, compatible with time.localtime().

==============================
sqlite3.Timestamp.timetz
Return time object with same time and tzinfo.

==============================
sqlite3.Timestamp.today
Current date or datetime:  same as self.__class__.fromtimestamp(time.time()).

==============================
sqlite3.Timestamp.toordinal
Return proleptic Gregorian ordinal
 January 1 of year 1 is day 1.

==============================
sqlite3.Timestamp.tzinfo
None

==============================
sqlite3.Timestamp.tzname
Return self.tzinfo.tzname(self).

==============================
sqlite3.Timestamp.utcfromtimestamp
Construct a naive UTC datetime from a POSIX timestamp.

==============================
sqlite3.Timestamp.utcnow
Return a new datetime representing UTC day and time.

==============================
sqlite3.Timestamp.utcoffset
Return self.tzinfo.utcoffset(self).

==============================
sqlite3.Timestamp.utctimetuple
Return UTC time tuple, compatible with time.localtime().

==============================
sqlite3.Timestamp.weekday
Return the day of the week represented by the date.
Monday == 0 ..
Sunday == 6

==============================
sqlite3.Timestamp.year
None

==============================
sqlite3.TimestampFromTicks
(ticks)
None

==============================
sqlite3.Warning
Common base class for all non-exit exceptions.

==============================
sqlite3.Warning.args
None

==============================
sqlite3.Warning.with_traceback
Exception.with_traceback(tb) --
set self.__traceback__ to tb and return self.

==============================
sqlite3.adapt
adapt(obj, protocol, alternate) -> adapt obj to given protocol
Non-standard.

==============================
sqlite3.adapters
dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list
 For example:  dict(one=1, two=2)

==============================
sqlite3.apilevel
str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object
If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.

==============================
sqlite3.collections
This module implements specialized container datatypes providing
alternatives to Python's general purpose built-in containers, dict,
list, set, and tuple.

* namedtuple   factory function for creating tuple subclasses with named fields
* deque        list-like container with fast appends and pops on either end
* ChainMap     dict-like class for creating a single view of multiple mappings
* Counter      dict subclass for counting hashable objects
* OrderedDict  dict subclass that remembers the order entries were added
* defaultdict  dict subclass that calls a factory function to supply missing values
* UserDict     wrapper around dictionary objects for easier dict subclassing
* UserList     wrapper around list objects for easier list subclassing
* UserString   wrapper around string objects for easier string subclassing

==============================
sqlite3.complete_statement
complete_statement(sql)

Checks if a string contains a complete SQL statement
Non-standard.

==============================
sqlite3.connect
connect(database[, timeout, detect_types, isolation_level,
        check_same_thread, factory, cached_statements, uri])

Opens a connection to the SQLite database file *database*
You can use
":memory:" to open a database connection to a database that resides in
RAM instead of on disk.

==============================
sqlite3.converters
dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list
 For example:  dict(one=1, two=2)

==============================
sqlite3.datetime
Fast implementation of the datetime type.

==============================
sqlite3.dbapi2
None

==============================
sqlite3.enable_callback_tracebacks
enable_callback_tracebacks(flag)

Enable or disable callback functions throwing errors to stderr.

==============================
sqlite3.enable_shared_cache
enable_shared_cache(do_enable)

Enable or disable shared cache mode for the calling thread.
Experimental/Non-standard.

==============================
sqlite3.paramstyle
str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object
If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.

==============================
sqlite3.register_adapter
register_adapter(type, callable)

Registers an adapter with pysqlite's adapter registry
Non-standard.

==============================
sqlite3.register_converter
register_converter(typename, callable)

Registers a converter with pysqlite
Non-standard.

==============================
sqlite3.sqlite_version
str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object
If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.

==============================
sqlite3.sqlite_version_info
Built-in immutable sequence.

If no argument is given, the constructor returns an empty tuple.
If iterable is specified the tuple is initialized from iterable's items.

If the argument is a tuple, the return value is the same object.

==============================
sqlite3.threadsafety
int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given
 If x is a number, return x.__int__()
 For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base
 The literal can be preceded by '+' or '-' and be surrounded
by whitespace
 The base defaults to 10
 Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

==============================
sqlite3.time
This module provides various functions to manipulate time values.

There are two standard representations of time
 One is the number
of seconds since the Epoch, in UTC (a.k.a
GMT)
 It may be an integer
or a floating point number (to represent fractions of seconds).
The Epoch is system-defined; on Unix, it is generally January 1st, 1970.
The actual value can be retrieved by calling gmtime(0).

The other representation is a tuple of 9 integers giving local time.
The tuple items are:
  year (including century, e.g
1998)
  month (1-12)
  day (1-31)
  hours (0-23)
  minutes (0-59)
  seconds (0-59)
  weekday (0-6, Monday is 0)
  Julian day (day in the year, 1-366)
  DST (Daylight Savings Time) flag (-1, 0 or 1)
If the DST flag is 0, the time is given in the regular time zone;
if it is 1, the time is given in the DST time zone;
if it is -1, mktime() should guess based on the date and time.

==============================
sqlite3.version
str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object
If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.

==============================
sqlite3.version_info
Built-in immutable sequence.

If no argument is given, the constructor returns an empty tuple.
If iterable is specified the tuple is initialized from iterable's items.

If the argument is a tuple, the return value is the same object.

