==============================
enum.DynamicClassAttribute
(fget=None, fset=None, fdel=None, doc=None)
Route attribute access on a class to __getattr__.

This is a descriptor, used to define attributes that act differently when
accessed through an instance and through a class
 Instance access remains
normal, but access to an attribute through a class will be routed to the
class's __getattr__ method; this is done by raising AttributeError.

This allows one to have properties active on an instance, and have virtual
attributes on the class with the same name (see Enum for an example).

==============================
enum.DynamicClassAttribute.deleter
(self, fdel)
None

==============================
enum.DynamicClassAttribute.getter
(self, fget)
None

==============================
enum.DynamicClassAttribute.setter
(self, fset)
None

==============================
enum.Enum
(value, names=None, *, module=None, qualname=None, type=None, start=1)
Generic enumeration.

Derive from this class to define new enumerations.

==============================
enum.EnumMeta
(cls, bases, classdict)
Metaclass for Enum

==============================
enum.EnumMeta.mro
(self, /)
Return a type's method resolution order.

==============================
enum.Flag
(value, names=None, *, module=None, qualname=None, type=None, start=1)
Support for flags

==============================
enum.Flag.name
The name of the Enum member.

==============================
enum.Flag.value
The value of the Enum member.

==============================
enum.IntEnum
(value, names=None, *, module=None, qualname=None, type=None, start=1)
Enum where members are also (and must be) ints

==============================
enum.IntEnum.name
The name of the Enum member.

==============================
enum.IntEnum.value
The value of the Enum member.

==============================
enum.IntFlag
(value, names=None, *, module=None, qualname=None, type=None, start=1)
Support for integer-based Flags

==============================
enum.MappingProxyType
None

==============================
enum.MappingProxyType.copy
D.copy() -> a shallow copy of D

==============================
enum.MappingProxyType.get
D.get(k[,d]) -> D[k] if k in D, else d
 d defaults to None.

==============================
enum.MappingProxyType.items
D.items() -> list of D's (key, value) pairs, as 2-tuples

==============================
enum.MappingProxyType.keys
D.keys() -> list of D's keys

==============================
enum.MappingProxyType.values
D.values() -> list of D's values

==============================
enum.auto
()
Instances are replaced with an appropriate value in Enum class suites.

==============================
enum.auto.value
The base class of the class hierarchy.

When called, it accepts no arguments and returns a new featureless
instance that has no instance attributes and cannot be given any.

==============================
enum.sys
This module provides access to some objects used or maintained by the
interpreter and to functions that interact strongly with the interpreter.

Dynamic objects:

argv -- command line arguments; argv[0] is the script pathname if known
path -- module search path; path[0] is the script directory, else ''
modules -- dictionary of loaded modules

displayhook -- called to show results in an interactive session
excepthook -- called to handle any uncaught exception other than SystemExit
  To customize printing in an interactive session or to install a custom
  top-level exception handler, assign other functions to replace these.

stdin -- standard input file object; used by input()
stdout -- standard output file object; used by print()
stderr -- standard error object; used for error messages
  By assigning other file objects (or objects that behave like files)
  to these, it is possible to redirect all of the interpreter's I/O.

last_type -- type of last uncaught exception
last_value -- value of last uncaught exception
last_traceback -- traceback of last uncaught exception
  These three are only available in an interactive session after a
  traceback has been printed.

Static objects:

builtin_module_names -- tuple of module names built into this interpreter
copyright -- copyright notice pertaining to this interpreter
exec_prefix -- prefix used to find the machine-specific Python library
executable -- absolute path of the executable binary of the Python interpreter
float_info -- a named tuple with information about the float implementation.
float_repr_style -- string indicating the style of repr() output for floats
hash_info -- a named tuple with information about the hash algorithm.
hexversion -- version information encoded as a single integer
implementation -- Python implementation information.
int_info -- a named tuple with information about the int implementation.
maxsize -- the largest supported length of containers.
maxunicode -- the value of the largest Unicode code point
platform -- platform identifier
prefix -- prefix used to find the Python library
thread_info -- a named tuple with information about the thread implementation.
version -- the version of this interpreter as a string
version_info -- version information as a named tuple
__stdin__ -- the original stdin; don't touch!
__stdout__ -- the original stdout; don't touch!
__stderr__ -- the original stderr; don't touch!
__displayhook__ -- the original displayhook; don't touch!
__excepthook__ -- the original excepthook; don't touch!

Functions:

displayhook() -- print an object to the screen, and save it in builtins._
excepthook() -- print an exception and its traceback to sys.stderr
exc_info() -- return thread-safe information about the current exception
exit() -- exit the interpreter by raising SystemExit
getdlopenflags() -- returns flags to be used for dlopen() calls
getprofile() -- get the global profiling function
getrefcount() -- return the reference count for an object (plus one :-)
getrecursionlimit() -- return the max recursion depth for the interpreter
getsizeof() -- return the size of an object in bytes
gettrace() -- get the global debug tracing function
setcheckinterval() -- control how often the interpreter checks for events
setdlopenflags() -- set the flags to be used for dlopen() calls
setprofile() -- set the global profiling function
setrecursionlimit() -- set the max recursion depth for the interpreter
settrace() -- set the global debug tracing function

==============================
enum.unique
(enumeration)
Class decorator for enumerations ensuring unique member values.

